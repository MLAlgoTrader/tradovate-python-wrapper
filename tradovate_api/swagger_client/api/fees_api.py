# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FeesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def market_data_subscription_exchange_scope_find(self, name, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_find  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: MarketDataSubscriptionExchangeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_exchange_scope_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_exchange_scope_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_exchange_scope_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_find  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: MarketDataSubscriptionExchangeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_exchange_scope_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `market_data_subscription_exchange_scope_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionExchangeScope/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketDataSubscriptionExchangeScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_exchange_scope_item(self, id, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_item  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarketDataSubscriptionExchangeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_exchange_scope_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_exchange_scope_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_exchange_scope_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_item  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarketDataSubscriptionExchangeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_exchange_scope_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `market_data_subscription_exchange_scope_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionExchangeScope/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketDataSubscriptionExchangeScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_exchange_scope_items(self, ids, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_items  # noqa: E501

        Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_exchange_scope_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_exchange_scope_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_exchange_scope_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_items  # noqa: E501

        Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_exchange_scope_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `market_data_subscription_exchange_scope_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionExchangeScope/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionExchangeScope]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_exchange_scope_list(self, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_list  # noqa: E501

        Retrieves all entities of MarketDataSubscriptionExchangeScope type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_exchange_scope_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_exchange_scope_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_data_subscription_exchange_scope_list_with_http_info(self, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_list  # noqa: E501

        Retrieves all entities of MarketDataSubscriptionExchangeScope type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_exchange_scope_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionExchangeScope/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionExchangeScope]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_exchange_scope_suggest(self, t, l, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_suggest  # noqa: E501

        Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_exchange_scope_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_exchange_scope_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_exchange_scope_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """market_data_subscription_exchange_scope_suggest  # noqa: E501

        Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_exchange_scope_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[MarketDataSubscriptionExchangeScope]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_exchange_scope_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `market_data_subscription_exchange_scope_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `market_data_subscription_exchange_scope_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionExchangeScope/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionExchangeScope]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_plan_find(self, name, **kwargs):  # noqa: E501
        """market_data_subscription_plan_find  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionPlan type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: MarketDataSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_plan_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_plan_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_plan_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """market_data_subscription_plan_find  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionPlan type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: MarketDataSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_plan_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `market_data_subscription_plan_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionPlan/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketDataSubscriptionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_plan_item(self, id, **kwargs):  # noqa: E501
        """market_data_subscription_plan_item  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionPlan type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarketDataSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_plan_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_plan_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_plan_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """market_data_subscription_plan_item  # noqa: E501

        Retrieves an entity of MarketDataSubscriptionPlan type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarketDataSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_plan_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `market_data_subscription_plan_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionPlan/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketDataSubscriptionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_plan_items(self, ids, **kwargs):  # noqa: E501
        """market_data_subscription_plan_items  # noqa: E501

        Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_plan_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_plan_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_plan_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """market_data_subscription_plan_items  # noqa: E501

        Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_plan_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `market_data_subscription_plan_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionPlan/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_plan_list(self, **kwargs):  # noqa: E501
        """market_data_subscription_plan_list  # noqa: E501

        Retrieves all entities of MarketDataSubscriptionPlan type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_plan_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_plan_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_data_subscription_plan_list_with_http_info(self, **kwargs):  # noqa: E501
        """market_data_subscription_plan_list  # noqa: E501

        Retrieves all entities of MarketDataSubscriptionPlan type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_plan_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionPlan/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_data_subscription_plan_suggest(self, t, l, **kwargs):  # noqa: E501
        """market_data_subscription_plan_suggest  # noqa: E501

        Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_data_subscription_plan_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.market_data_subscription_plan_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def market_data_subscription_plan_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """market_data_subscription_plan_suggest  # noqa: E501

        Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_data_subscription_plan_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[MarketDataSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_data_subscription_plan_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `market_data_subscription_plan_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `market_data_subscription_plan_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marketDataSubscriptionPlan/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketDataSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tradovate_subscription_plan_find(self, name, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_find  # noqa: E501

        Retrieves an entity of TradovateSubscriptionPlan type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: TradovateSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tradovate_subscription_plan_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.tradovate_subscription_plan_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def tradovate_subscription_plan_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_find  # noqa: E501

        Retrieves an entity of TradovateSubscriptionPlan type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: TradovateSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tradovate_subscription_plan_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `tradovate_subscription_plan_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradovateSubscriptionPlan/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradovateSubscriptionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tradovate_subscription_plan_item(self, id, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_item  # noqa: E501

        Retrieves an entity of TradovateSubscriptionPlan type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: TradovateSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tradovate_subscription_plan_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tradovate_subscription_plan_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tradovate_subscription_plan_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_item  # noqa: E501

        Retrieves an entity of TradovateSubscriptionPlan type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: TradovateSubscriptionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tradovate_subscription_plan_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tradovate_subscription_plan_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradovateSubscriptionPlan/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradovateSubscriptionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tradovate_subscription_plan_items(self, ids, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_items  # noqa: E501

        Retrieves multiple entities of TradovateSubscriptionPlan type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tradovate_subscription_plan_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.tradovate_subscription_plan_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def tradovate_subscription_plan_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_items  # noqa: E501

        Retrieves multiple entities of TradovateSubscriptionPlan type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tradovate_subscription_plan_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `tradovate_subscription_plan_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradovateSubscriptionPlan/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradovateSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tradovate_subscription_plan_list(self, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_list  # noqa: E501

        Retrieves all entities of TradovateSubscriptionPlan type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tradovate_subscription_plan_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tradovate_subscription_plan_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def tradovate_subscription_plan_list_with_http_info(self, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_list  # noqa: E501

        Retrieves all entities of TradovateSubscriptionPlan type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tradovate_subscription_plan_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradovateSubscriptionPlan/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradovateSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tradovate_subscription_plan_suggest(self, t, l, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_suggest  # noqa: E501

        Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tradovate_subscription_plan_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.tradovate_subscription_plan_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def tradovate_subscription_plan_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """tradovate_subscription_plan_suggest  # noqa: E501

        Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tradovate_subscription_plan_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[TradovateSubscriptionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tradovate_subscription_plan_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `tradovate_subscription_plan_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `tradovate_subscription_plan_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradovateSubscriptionPlan/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradovateSubscriptionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
