# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradovateSubscriptionPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'title': 'str',
        'price': 'float',
        'start_date': 'TradeDate',
        'discontinued_date': 'TradeDate',
        'category': 'str',
        'trial': 'bool',
        'duration': 'int',
        'duration_units': 'str',
        'risk_category_id': 'int',
        'multiple_accounts': 'bool',
        'organization_id': 'int',
        'replay_sessions': 'int',
        'footnote': 'str',
        'sim_only': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'price': 'price',
        'start_date': 'startDate',
        'discontinued_date': 'discontinuedDate',
        'category': 'category',
        'trial': 'trial',
        'duration': 'duration',
        'duration_units': 'durationUnits',
        'risk_category_id': 'riskCategoryId',
        'multiple_accounts': 'multipleAccounts',
        'organization_id': 'organizationId',
        'replay_sessions': 'replaySessions',
        'footnote': 'footnote',
        'sim_only': 'simOnly'
    }

    def __init__(self, id=None, name=None, title=None, price=None, start_date=None, discontinued_date=None, category=None, trial=None, duration=None, duration_units=None, risk_category_id=None, multiple_accounts=None, organization_id=None, replay_sessions=None, footnote=None, sim_only=None):  # noqa: E501
        """TradovateSubscriptionPlan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._title = None
        self._price = None
        self._start_date = None
        self._discontinued_date = None
        self._category = None
        self._trial = None
        self._duration = None
        self._duration_units = None
        self._risk_category_id = None
        self._multiple_accounts = None
        self._organization_id = None
        self._replay_sessions = None
        self._footnote = None
        self._sim_only = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.title = title
        self.price = price
        if start_date is not None:
            self.start_date = start_date
        if discontinued_date is not None:
            self.discontinued_date = discontinued_date
        self.category = category
        self.trial = trial
        self.duration = duration
        self.duration_units = duration_units
        if risk_category_id is not None:
            self.risk_category_id = risk_category_id
        if multiple_accounts is not None:
            self.multiple_accounts = multiple_accounts
        if organization_id is not None:
            self.organization_id = organization_id
        if replay_sessions is not None:
            self.replay_sessions = replay_sessions
        if footnote is not None:
            self.footnote = footnote
        if sim_only is not None:
            self.sim_only = sim_only

    @property
    def id(self):
        """Gets the id of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The id of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TradovateSubscriptionPlan.


        :param id: The id of this TradovateSubscriptionPlan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The name of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TradovateSubscriptionPlan.


        :param name: The name of this TradovateSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The title of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TradovateSubscriptionPlan.


        :param title: The title of this TradovateSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def price(self):
        """Gets the price of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The price of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TradovateSubscriptionPlan.


        :param price: The price of this TradovateSubscriptionPlan.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def start_date(self):
        """Gets the start_date of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The start_date of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: TradeDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TradovateSubscriptionPlan.


        :param start_date: The start_date of this TradovateSubscriptionPlan.  # noqa: E501
        :type: TradeDate
        """

        self._start_date = start_date

    @property
    def discontinued_date(self):
        """Gets the discontinued_date of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The discontinued_date of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: TradeDate
        """
        return self._discontinued_date

    @discontinued_date.setter
    def discontinued_date(self, discontinued_date):
        """Sets the discontinued_date of this TradovateSubscriptionPlan.


        :param discontinued_date: The discontinued_date of this TradovateSubscriptionPlan.  # noqa: E501
        :type: TradeDate
        """

        self._discontinued_date = discontinued_date

    @property
    def category(self):
        """Gets the category of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The category of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TradovateSubscriptionPlan.


        :param category: The category of this TradovateSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def trial(self):
        """Gets the trial of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The trial of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this TradovateSubscriptionPlan.


        :param trial: The trial of this TradovateSubscriptionPlan.  # noqa: E501
        :type: bool
        """
        if trial is None:
            raise ValueError("Invalid value for `trial`, must not be `None`")  # noqa: E501

        self._trial = trial

    @property
    def duration(self):
        """Gets the duration of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The duration of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TradovateSubscriptionPlan.


        :param duration: The duration of this TradovateSubscriptionPlan.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def duration_units(self):
        """Gets the duration_units of this TradovateSubscriptionPlan.  # noqa: E501

        Month, Quarter, Week, Year  # noqa: E501

        :return: The duration_units of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._duration_units

    @duration_units.setter
    def duration_units(self, duration_units):
        """Sets the duration_units of this TradovateSubscriptionPlan.

        Month, Quarter, Week, Year  # noqa: E501

        :param duration_units: The duration_units of this TradovateSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if duration_units is None:
            raise ValueError("Invalid value for `duration_units`, must not be `None`")  # noqa: E501
        allowed_values = ["Month", "Quarter", "Week", "Year"]  # noqa: E501
        if duration_units not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_units` ({0}), must be one of {1}"  # noqa: E501
                .format(duration_units, allowed_values)
            )

        self._duration_units = duration_units

    @property
    def risk_category_id(self):
        """Gets the risk_category_id of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The risk_category_id of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._risk_category_id

    @risk_category_id.setter
    def risk_category_id(self, risk_category_id):
        """Sets the risk_category_id of this TradovateSubscriptionPlan.


        :param risk_category_id: The risk_category_id of this TradovateSubscriptionPlan.  # noqa: E501
        :type: int
        """

        self._risk_category_id = risk_category_id

    @property
    def multiple_accounts(self):
        """Gets the multiple_accounts of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The multiple_accounts of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_accounts

    @multiple_accounts.setter
    def multiple_accounts(self, multiple_accounts):
        """Sets the multiple_accounts of this TradovateSubscriptionPlan.


        :param multiple_accounts: The multiple_accounts of this TradovateSubscriptionPlan.  # noqa: E501
        :type: bool
        """

        self._multiple_accounts = multiple_accounts

    @property
    def organization_id(self):
        """Gets the organization_id of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The organization_id of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TradovateSubscriptionPlan.


        :param organization_id: The organization_id of this TradovateSubscriptionPlan.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def replay_sessions(self):
        """Gets the replay_sessions of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The replay_sessions of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._replay_sessions

    @replay_sessions.setter
    def replay_sessions(self, replay_sessions):
        """Sets the replay_sessions of this TradovateSubscriptionPlan.


        :param replay_sessions: The replay_sessions of this TradovateSubscriptionPlan.  # noqa: E501
        :type: int
        """

        self._replay_sessions = replay_sessions

    @property
    def footnote(self):
        """Gets the footnote of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The footnote of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._footnote

    @footnote.setter
    def footnote(self, footnote):
        """Sets the footnote of this TradovateSubscriptionPlan.


        :param footnote: The footnote of this TradovateSubscriptionPlan.  # noqa: E501
        :type: str
        """

        self._footnote = footnote

    @property
    def sim_only(self):
        """Gets the sim_only of this TradovateSubscriptionPlan.  # noqa: E501


        :return: The sim_only of this TradovateSubscriptionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._sim_only

    @sim_only.setter
    def sim_only(self, sim_only):
        """Sets the sim_only of this TradovateSubscriptionPlan.


        :param sim_only: The sim_only of this TradovateSubscriptionPlan.  # noqa: E501
        :type: bool
        """

        self._sim_only = sim_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradovateSubscriptionPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradovateSubscriptionPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
