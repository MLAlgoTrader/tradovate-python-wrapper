# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecutionReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'command_id': 'int',
        'name': 'str',
        'account_id': 'int',
        'contract_id': 'int',
        'timestamp': 'datetime',
        'trade_date': 'TradeDate',
        'order_id': 'int',
        'exec_type': 'str',
        'exec_ref_id': 'str',
        'ord_status': 'str',
        'action': 'str',
        'cum_qty': 'int',
        'avg_px': 'float',
        'last_qty': 'int',
        'last_px': 'float',
        'reject_reason': 'str',
        'text': 'str',
        'exchange_order_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'command_id': 'commandId',
        'name': 'name',
        'account_id': 'accountId',
        'contract_id': 'contractId',
        'timestamp': 'timestamp',
        'trade_date': 'tradeDate',
        'order_id': 'orderId',
        'exec_type': 'execType',
        'exec_ref_id': 'execRefId',
        'ord_status': 'ordStatus',
        'action': 'action',
        'cum_qty': 'cumQty',
        'avg_px': 'avgPx',
        'last_qty': 'lastQty',
        'last_px': 'lastPx',
        'reject_reason': 'rejectReason',
        'text': 'text',
        'exchange_order_id': 'exchangeOrderId'
    }

    def __init__(self, id=None, command_id=None, name=None, account_id=None, contract_id=None, timestamp=None, trade_date=None, order_id=None, exec_type=None, exec_ref_id=None, ord_status=None, action=None, cum_qty=None, avg_px=None, last_qty=None, last_px=None, reject_reason=None, text=None, exchange_order_id=None):  # noqa: E501
        """ExecutionReport - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._command_id = None
        self._name = None
        self._account_id = None
        self._contract_id = None
        self._timestamp = None
        self._trade_date = None
        self._order_id = None
        self._exec_type = None
        self._exec_ref_id = None
        self._ord_status = None
        self._action = None
        self._cum_qty = None
        self._avg_px = None
        self._last_qty = None
        self._last_px = None
        self._reject_reason = None
        self._text = None
        self._exchange_order_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.command_id = command_id
        self.name = name
        self.account_id = account_id
        self.contract_id = contract_id
        self.timestamp = timestamp
        if trade_date is not None:
            self.trade_date = trade_date
        self.order_id = order_id
        self.exec_type = exec_type
        if exec_ref_id is not None:
            self.exec_ref_id = exec_ref_id
        if ord_status is not None:
            self.ord_status = ord_status
        self.action = action
        if cum_qty is not None:
            self.cum_qty = cum_qty
        if avg_px is not None:
            self.avg_px = avg_px
        if last_qty is not None:
            self.last_qty = last_qty
        if last_px is not None:
            self.last_px = last_px
        if reject_reason is not None:
            self.reject_reason = reject_reason
        if text is not None:
            self.text = text
        if exchange_order_id is not None:
            self.exchange_order_id = exchange_order_id

    @property
    def id(self):
        """Gets the id of this ExecutionReport.  # noqa: E501


        :return: The id of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecutionReport.


        :param id: The id of this ExecutionReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def command_id(self):
        """Gets the command_id of this ExecutionReport.  # noqa: E501


        :return: The command_id of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this ExecutionReport.


        :param command_id: The command_id of this ExecutionReport.  # noqa: E501
        :type: int
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")  # noqa: E501

        self._command_id = command_id

    @property
    def name(self):
        """Gets the name of this ExecutionReport.  # noqa: E501


        :return: The name of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExecutionReport.


        :param name: The name of this ExecutionReport.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_id(self):
        """Gets the account_id of this ExecutionReport.  # noqa: E501


        :return: The account_id of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ExecutionReport.


        :param account_id: The account_id of this ExecutionReport.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def contract_id(self):
        """Gets the contract_id of this ExecutionReport.  # noqa: E501


        :return: The contract_id of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ExecutionReport.


        :param contract_id: The contract_id of this ExecutionReport.  # noqa: E501
        :type: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ExecutionReport.  # noqa: E501


        :return: The timestamp of this ExecutionReport.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExecutionReport.


        :param timestamp: The timestamp of this ExecutionReport.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def trade_date(self):
        """Gets the trade_date of this ExecutionReport.  # noqa: E501


        :return: The trade_date of this ExecutionReport.  # noqa: E501
        :rtype: TradeDate
        """
        return self._trade_date

    @trade_date.setter
    def trade_date(self, trade_date):
        """Sets the trade_date of this ExecutionReport.


        :param trade_date: The trade_date of this ExecutionReport.  # noqa: E501
        :type: TradeDate
        """

        self._trade_date = trade_date

    @property
    def order_id(self):
        """Gets the order_id of this ExecutionReport.  # noqa: E501


        :return: The order_id of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ExecutionReport.


        :param order_id: The order_id of this ExecutionReport.  # noqa: E501
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def exec_type(self):
        """Gets the exec_type of this ExecutionReport.  # noqa: E501

        Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect  # noqa: E501

        :return: The exec_type of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._exec_type

    @exec_type.setter
    def exec_type(self, exec_type):
        """Sets the exec_type of this ExecutionReport.

        Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect  # noqa: E501

        :param exec_type: The exec_type of this ExecutionReport.  # noqa: E501
        :type: str
        """
        if exec_type is None:
            raise ValueError("Invalid value for `exec_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Canceled", "Completed", "DoneForDay", "Expired", "New", "OrderStatus", "PendingCancel", "PendingNew", "PendingReplace", "Rejected", "Replaced", "Stopped", "Suspended", "Trade", "TradeCancel", "TradeCorrect"]  # noqa: E501
        if exec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_type` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_type, allowed_values)
            )

        self._exec_type = exec_type

    @property
    def exec_ref_id(self):
        """Gets the exec_ref_id of this ExecutionReport.  # noqa: E501


        :return: The exec_ref_id of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._exec_ref_id

    @exec_ref_id.setter
    def exec_ref_id(self, exec_ref_id):
        """Sets the exec_ref_id of this ExecutionReport.


        :param exec_ref_id: The exec_ref_id of this ExecutionReport.  # noqa: E501
        :type: str
        """

        self._exec_ref_id = exec_ref_id

    @property
    def ord_status(self):
        """Gets the ord_status of this ExecutionReport.  # noqa: E501

        Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working  # noqa: E501

        :return: The ord_status of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._ord_status

    @ord_status.setter
    def ord_status(self, ord_status):
        """Sets the ord_status of this ExecutionReport.

        Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working  # noqa: E501

        :param ord_status: The ord_status of this ExecutionReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["Canceled", "Completed", "Expired", "Filled", "PendingCancel", "PendingNew", "PendingReplace", "Rejected", "Suspended", "Unknown", "Working"]  # noqa: E501
        if ord_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_status, allowed_values)
            )

        self._ord_status = ord_status

    @property
    def action(self):
        """Gets the action of this ExecutionReport.  # noqa: E501

        Buy, Sell  # noqa: E501

        :return: The action of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ExecutionReport.

        Buy, Sell  # noqa: E501

        :param action: The action of this ExecutionReport.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["Buy", "Sell"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def cum_qty(self):
        """Gets the cum_qty of this ExecutionReport.  # noqa: E501


        :return: The cum_qty of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._cum_qty

    @cum_qty.setter
    def cum_qty(self, cum_qty):
        """Sets the cum_qty of this ExecutionReport.


        :param cum_qty: The cum_qty of this ExecutionReport.  # noqa: E501
        :type: int
        """

        self._cum_qty = cum_qty

    @property
    def avg_px(self):
        """Gets the avg_px of this ExecutionReport.  # noqa: E501


        :return: The avg_px of this ExecutionReport.  # noqa: E501
        :rtype: float
        """
        return self._avg_px

    @avg_px.setter
    def avg_px(self, avg_px):
        """Sets the avg_px of this ExecutionReport.


        :param avg_px: The avg_px of this ExecutionReport.  # noqa: E501
        :type: float
        """

        self._avg_px = avg_px

    @property
    def last_qty(self):
        """Gets the last_qty of this ExecutionReport.  # noqa: E501


        :return: The last_qty of this ExecutionReport.  # noqa: E501
        :rtype: int
        """
        return self._last_qty

    @last_qty.setter
    def last_qty(self, last_qty):
        """Sets the last_qty of this ExecutionReport.


        :param last_qty: The last_qty of this ExecutionReport.  # noqa: E501
        :type: int
        """

        self._last_qty = last_qty

    @property
    def last_px(self):
        """Gets the last_px of this ExecutionReport.  # noqa: E501


        :return: The last_px of this ExecutionReport.  # noqa: E501
        :rtype: float
        """
        return self._last_px

    @last_px.setter
    def last_px(self, last_px):
        """Sets the last_px of this ExecutionReport.


        :param last_px: The last_px of this ExecutionReport.  # noqa: E501
        :type: float
        """

        self._last_px = last_px

    @property
    def reject_reason(self):
        """Gets the reject_reason of this ExecutionReport.  # noqa: E501

        AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported  # noqa: E501

        :return: The reject_reason of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this ExecutionReport.

        AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported  # noqa: E501

        :param reject_reason: The reject_reason of this ExecutionReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["AccountClosed", "AdvancedTrailingStopUnsupported", "AnotherCommandPending", "BackMonthProhibited", "ExecutionProviderNotConfigured", "ExecutionProviderUnavailable", "InvalidContract", "InvalidPrice", "LiquidationOnly", "LiquidationOnlyBeforeExpiration", "MaxOrderQtyIsNotSpecified", "MaxOrderQtyLimitReached", "MaxPosLimitMisconfigured", "MaxPosLimitReached", "MaxTotalPosLimitReached", "MultipleAccountPlanRequired", "NoQuote", "NotEnoughLiquidity", "OtherExecutionRelated", "ParentRejected", "RiskCheckTimeout", "SessionClosed", "Success", "TooLate", "TradingLocked", "TrailingStopNonOrderQtyModify", "Unauthorized", "UnknownReason", "Unsupported"]  # noqa: E501
        if reject_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reject_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reject_reason, allowed_values)
            )

        self._reject_reason = reject_reason

    @property
    def text(self):
        """Gets the text of this ExecutionReport.  # noqa: E501


        :return: The text of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExecutionReport.


        :param text: The text of this ExecutionReport.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def exchange_order_id(self):
        """Gets the exchange_order_id of this ExecutionReport.  # noqa: E501


        :return: The exchange_order_id of this ExecutionReport.  # noqa: E501
        :rtype: str
        """
        return self._exchange_order_id

    @exchange_order_id.setter
    def exchange_order_id(self, exchange_order_id):
        """Sets the exchange_order_id of this ExecutionReport.


        :param exchange_order_id: The exchange_order_id of this ExecutionReport.  # noqa: E501
        :type: str
        """

        self._exchange_order_id = exchange_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
