# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketDataSubscriptionPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'title': 'str',
        'price': 'float',
        'start_date': 'TradeDate',
        'discontinued_date': 'TradeDate',
        'exchange_scope_id': 'int',
        'data_type': 'str',
        'professional': 'str',
        'tooltip': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'price': 'price',
        'start_date': 'startDate',
        'discontinued_date': 'discontinuedDate',
        'exchange_scope_id': 'exchangeScopeId',
        'data_type': 'dataType',
        'professional': 'professional',
        'tooltip': 'tooltip'
    }

    def __init__(self, id=None, name=None, title=None, price=None, start_date=None, discontinued_date=None, exchange_scope_id=None, data_type=None, professional=None, tooltip=None):  # noqa: E501
        """MarketDataSubscriptionPlan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._title = None
        self._price = None
        self._start_date = None
        self._discontinued_date = None
        self._exchange_scope_id = None
        self._data_type = None
        self._professional = None
        self._tooltip = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.title = title
        self.price = price
        if start_date is not None:
            self.start_date = start_date
        if discontinued_date is not None:
            self.discontinued_date = discontinued_date
        self.exchange_scope_id = exchange_scope_id
        self.data_type = data_type
        self.professional = professional
        if tooltip is not None:
            self.tooltip = tooltip

    @property
    def id(self):
        """Gets the id of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The id of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketDataSubscriptionPlan.


        :param id: The id of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The name of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MarketDataSubscriptionPlan.


        :param name: The name of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The title of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MarketDataSubscriptionPlan.


        :param title: The title of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def price(self):
        """Gets the price of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The price of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MarketDataSubscriptionPlan.


        :param price: The price of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def start_date(self):
        """Gets the start_date of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The start_date of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: TradeDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MarketDataSubscriptionPlan.


        :param start_date: The start_date of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: TradeDate
        """

        self._start_date = start_date

    @property
    def discontinued_date(self):
        """Gets the discontinued_date of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The discontinued_date of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: TradeDate
        """
        return self._discontinued_date

    @discontinued_date.setter
    def discontinued_date(self, discontinued_date):
        """Sets the discontinued_date of this MarketDataSubscriptionPlan.


        :param discontinued_date: The discontinued_date of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: TradeDate
        """

        self._discontinued_date = discontinued_date

    @property
    def exchange_scope_id(self):
        """Gets the exchange_scope_id of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The exchange_scope_id of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: int
        """
        return self._exchange_scope_id

    @exchange_scope_id.setter
    def exchange_scope_id(self, exchange_scope_id):
        """Sets the exchange_scope_id of this MarketDataSubscriptionPlan.


        :param exchange_scope_id: The exchange_scope_id of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: int
        """
        if exchange_scope_id is None:
            raise ValueError("Invalid value for `exchange_scope_id`, must not be `None`")  # noqa: E501

        self._exchange_scope_id = exchange_scope_id

    @property
    def data_type(self):
        """Gets the data_type of this MarketDataSubscriptionPlan.  # noqa: E501

        DOM, Top  # noqa: E501

        :return: The data_type of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this MarketDataSubscriptionPlan.

        DOM, Top  # noqa: E501

        :param data_type: The data_type of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DOM", "Top"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def professional(self):
        """Gets the professional of this MarketDataSubscriptionPlan.  # noqa: E501

        Either, NonProfessional, Professional  # noqa: E501

        :return: The professional of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._professional

    @professional.setter
    def professional(self, professional):
        """Sets the professional of this MarketDataSubscriptionPlan.

        Either, NonProfessional, Professional  # noqa: E501

        :param professional: The professional of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: str
        """
        if professional is None:
            raise ValueError("Invalid value for `professional`, must not be `None`")  # noqa: E501
        allowed_values = ["Either", "NonProfessional", "Professional"]  # noqa: E501
        if professional not in allowed_values:
            raise ValueError(
                "Invalid value for `professional` ({0}), must be one of {1}"  # noqa: E501
                .format(professional, allowed_values)
            )

        self._professional = professional

    @property
    def tooltip(self):
        """Gets the tooltip of this MarketDataSubscriptionPlan.  # noqa: E501


        :return: The tooltip of this MarketDataSubscriptionPlan.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this MarketDataSubscriptionPlan.


        :param tooltip: The tooltip of this MarketDataSubscriptionPlan.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketDataSubscriptionPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketDataSubscriptionPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
