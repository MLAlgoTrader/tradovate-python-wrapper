# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PricesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_speed(self, body, **kwargs):  # noqa: E501
        """change_speed  # noqa: E501

        ### Change the playback speed of a Market Replay session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_speed(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeSpeed body: (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_speed_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.change_speed_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def change_speed_with_http_info(self, body, **kwargs):  # noqa: E501
        """change_speed  # noqa: E501

        ### Change the playback speed of a Market Replay session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_speed_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeSpeed body: (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_speed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_speed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/replay/changespeed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_replay_session(self, body, **kwargs):  # noqa: E501
        """check_replay_session  # noqa: E501

        ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  ```js  const URL = 'wss://replay.tradovateapi.com/v1/websocket'  const myMarketReplaySocket = new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen = function() {     myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`) })  //JSON string for midnight April 30th 2018 const startTimestamp = new Date('2018-04-30').toJSON() myMarketReplaySocket.send(`replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}`)  //listen for response myMarketReplaySocket.addEventListener('message', msg => {     const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]     if(datas) {         datas.forEach(({i, d}) => {             if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.                 console.log(d) //=> { checkStatus: 'OK' }                 //if the status is OK we can send the initializeClock message             }         })     }  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_replay_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CheckReplaySession body: (required)
        :return: CheckReplaySessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_replay_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.check_replay_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def check_replay_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """check_replay_session  # noqa: E501

        ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements. You should use this endpoint from a WebSocket hooked up to the Market Replay URL.  ```js  const URL = 'wss://replay.tradovateapi.com/v1/websocket'  const myMarketReplaySocket = new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onopen = function() {     myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`) })  //JSON string for midnight April 30th 2018 const startTimestamp = new Date('2018-04-30').toJSON() myMarketReplaySocket.send(`replay/checkreplaysession\\n1\\n\\n${JSON.stringify({startTimestamp})}`)  //listen for response myMarketReplaySocket.addEventListener('message', msg => {     const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char     //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]     if(datas) {         datas.forEach(({i, d}) => {             if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.                 console.log(d) //=> { checkStatus: 'OK' }                 //if the status is OK we can send the initializeClock message             }         })     }  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_replay_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CheckReplaySession body: (required)
        :return: CheckReplaySessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_replay_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `check_replay_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/replay/checkreplaysession', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CheckReplaySessionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initialize_clock(self, body, **kwargs):  # noqa: E501
        """initialize_clock  # noqa: E501

        ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. ```js  const URL = 'wss://replay.tradovateapi.com/v1/websocket'  const myMarketReplaySocket = new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen = function onOpen() {     myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`) })  const requestBody = {     startTimestamp: new Date('2018-04-30').toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(`replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}`)  myMarketReplaySocket.addEventListener('message', msg => {     const datas = JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) => {             if(i && i === 1) { //sent id is 1, response id will be 1                 console.log(d) //=> { ok: true }             }         })     } })  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initialize_clock(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitializeClock body: (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initialize_clock_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.initialize_clock_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def initialize_clock_with_http_info(self, body, **kwargs):  # noqa: E501
        """initialize_clock  # noqa: E501

        ### Set the inital date and time for a market replay session. Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session. ```js  const URL = 'wss://replay.tradovateapi.com/v1/websocket'  const myMarketReplaySocket = new WebSocket(URL)  //simple WebSocket authorization procedure myMarketReplaySocket.onOpen = function onOpen() {     myMarketReplaySocket.send(`authorize\\n0\\n\\n${accessToken}`) })  const requestBody = {     startTimestamp: new Date('2018-04-30').toJSON(),     speed: 100, //100%, range is from 0-400%     initialBalance: 50000 //account balance for replay session }  myMarketReplaySocket.send(`replay/initializeclock\\n1\\n\\n${JSON.stringify(requestBody)}`)  myMarketReplaySocket.addEventListener('message', msg => {     const datas = JSON.parse(msg.data.slice(1))     if(datas) {         datas.forEach(({i, d}) => {             if(i && i === 1) { //sent id is 1, response id will be 1                 console.log(d) //=> { ok: true }             }         })     } })  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initialize_clock_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitializeClock body: (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initialize_clock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `initialize_clock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/replay/initializeclock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
