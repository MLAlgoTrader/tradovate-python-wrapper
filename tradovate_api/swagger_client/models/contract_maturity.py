# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractMaturity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product_id': 'int',
        'expiration_month': 'int',
        'expiration_date': 'datetime',
        'first_intent_date': 'datetime',
        'underlying_id': 'int',
        'is_front': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'product_id': 'productId',
        'expiration_month': 'expirationMonth',
        'expiration_date': 'expirationDate',
        'first_intent_date': 'firstIntentDate',
        'underlying_id': 'underlyingId',
        'is_front': 'isFront'
    }

    def __init__(self, id=None, product_id=None, expiration_month=None, expiration_date=None, first_intent_date=None, underlying_id=None, is_front=None):  # noqa: E501
        """ContractMaturity - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_id = None
        self._expiration_month = None
        self._expiration_date = None
        self._first_intent_date = None
        self._underlying_id = None
        self._is_front = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.product_id = product_id
        self.expiration_month = expiration_month
        self.expiration_date = expiration_date
        if first_intent_date is not None:
            self.first_intent_date = first_intent_date
        if underlying_id is not None:
            self.underlying_id = underlying_id
        self.is_front = is_front

    @property
    def id(self):
        """Gets the id of this ContractMaturity.  # noqa: E501


        :return: The id of this ContractMaturity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractMaturity.


        :param id: The id of this ContractMaturity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product_id(self):
        """Gets the product_id of this ContractMaturity.  # noqa: E501


        :return: The product_id of this ContractMaturity.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ContractMaturity.


        :param product_id: The product_id of this ContractMaturity.  # noqa: E501
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def expiration_month(self):
        """Gets the expiration_month of this ContractMaturity.  # noqa: E501


        :return: The expiration_month of this ContractMaturity.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this ContractMaturity.


        :param expiration_month: The expiration_month of this ContractMaturity.  # noqa: E501
        :type: int
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ContractMaturity.  # noqa: E501


        :return: The expiration_date of this ContractMaturity.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ContractMaturity.


        :param expiration_date: The expiration_date of this ContractMaturity.  # noqa: E501
        :type: datetime
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def first_intent_date(self):
        """Gets the first_intent_date of this ContractMaturity.  # noqa: E501


        :return: The first_intent_date of this ContractMaturity.  # noqa: E501
        :rtype: datetime
        """
        return self._first_intent_date

    @first_intent_date.setter
    def first_intent_date(self, first_intent_date):
        """Sets the first_intent_date of this ContractMaturity.


        :param first_intent_date: The first_intent_date of this ContractMaturity.  # noqa: E501
        :type: datetime
        """

        self._first_intent_date = first_intent_date

    @property
    def underlying_id(self):
        """Gets the underlying_id of this ContractMaturity.  # noqa: E501

        Underlying  # noqa: E501

        :return: The underlying_id of this ContractMaturity.  # noqa: E501
        :rtype: int
        """
        return self._underlying_id

    @underlying_id.setter
    def underlying_id(self, underlying_id):
        """Sets the underlying_id of this ContractMaturity.

        Underlying  # noqa: E501

        :param underlying_id: The underlying_id of this ContractMaturity.  # noqa: E501
        :type: int
        """

        self._underlying_id = underlying_id

    @property
    def is_front(self):
        """Gets the is_front of this ContractMaturity.  # noqa: E501


        :return: The is_front of this ContractMaturity.  # noqa: E501
        :rtype: bool
        """
        return self._is_front

    @is_front.setter
    def is_front(self, is_front):
        """Sets the is_front of this ContractMaturity.


        :param is_front: The is_front of this ContractMaturity.  # noqa: E501
        :type: bool
        """
        if is_front is None:
            raise ValueError("Invalid value for `is_front`, must not be `None`")  # noqa: E501

        self._is_front = is_front

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractMaturity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractMaturity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
