# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'street_address1': 'str',
        'street_address2': 'str',
        'city': 'str',
        'state': 'str',
        'post_code': 'str',
        'country': 'str',
        'phone': 'str',
        'mailing_is_different': 'bool',
        'mailing_street_address1': 'str',
        'mailing_street_address2': 'str',
        'mailing_city': 'str',
        'mailing_state': 'str',
        'mailing_post_code': 'str',
        'mailing_country': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'street_address1': 'streetAddress1',
        'street_address2': 'streetAddress2',
        'city': 'city',
        'state': 'state',
        'post_code': 'postCode',
        'country': 'country',
        'phone': 'phone',
        'mailing_is_different': 'mailingIsDifferent',
        'mailing_street_address1': 'mailingStreetAddress1',
        'mailing_street_address2': 'mailingStreetAddress2',
        'mailing_city': 'mailingCity',
        'mailing_state': 'mailingState',
        'mailing_post_code': 'mailingPostCode',
        'mailing_country': 'mailingCountry'
    }

    def __init__(self, id=None, user_id=None, first_name=None, last_name=None, street_address1=None, street_address2=None, city=None, state=None, post_code=None, country=None, phone=None, mailing_is_different=None, mailing_street_address1=None, mailing_street_address2=None, mailing_city=None, mailing_state=None, mailing_post_code=None, mailing_country=None):  # noqa: E501
        """ContactInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._street_address1 = None
        self._street_address2 = None
        self._city = None
        self._state = None
        self._post_code = None
        self._country = None
        self._phone = None
        self._mailing_is_different = None
        self._mailing_street_address1 = None
        self._mailing_street_address2 = None
        self._mailing_city = None
        self._mailing_state = None
        self._mailing_post_code = None
        self._mailing_country = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        self.street_address1 = street_address1
        if street_address2 is not None:
            self.street_address2 = street_address2
        self.city = city
        if state is not None:
            self.state = state
        if post_code is not None:
            self.post_code = post_code
        self.country = country
        self.phone = phone
        if mailing_is_different is not None:
            self.mailing_is_different = mailing_is_different
        if mailing_street_address1 is not None:
            self.mailing_street_address1 = mailing_street_address1
        if mailing_street_address2 is not None:
            self.mailing_street_address2 = mailing_street_address2
        if mailing_city is not None:
            self.mailing_city = mailing_city
        if mailing_state is not None:
            self.mailing_state = mailing_state
        if mailing_post_code is not None:
            self.mailing_post_code = mailing_post_code
        if mailing_country is not None:
            self.mailing_country = mailing_country

    @property
    def id(self):
        """Gets the id of this ContactInfo.  # noqa: E501


        :return: The id of this ContactInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactInfo.


        :param id: The id of this ContactInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this ContactInfo.  # noqa: E501


        :return: The user_id of this ContactInfo.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ContactInfo.


        :param user_id: The user_id of this ContactInfo.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this ContactInfo.  # noqa: E501


        :return: The first_name of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactInfo.


        :param first_name: The first_name of this ContactInfo.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactInfo.  # noqa: E501


        :return: The last_name of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactInfo.


        :param last_name: The last_name of this ContactInfo.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def street_address1(self):
        """Gets the street_address1 of this ContactInfo.  # noqa: E501


        :return: The street_address1 of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._street_address1

    @street_address1.setter
    def street_address1(self, street_address1):
        """Sets the street_address1 of this ContactInfo.


        :param street_address1: The street_address1 of this ContactInfo.  # noqa: E501
        :type: str
        """
        if street_address1 is None:
            raise ValueError("Invalid value for `street_address1`, must not be `None`")  # noqa: E501

        self._street_address1 = street_address1

    @property
    def street_address2(self):
        """Gets the street_address2 of this ContactInfo.  # noqa: E501


        :return: The street_address2 of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this ContactInfo.


        :param street_address2: The street_address2 of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._street_address2 = street_address2

    @property
    def city(self):
        """Gets the city of this ContactInfo.  # noqa: E501


        :return: The city of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactInfo.


        :param city: The city of this ContactInfo.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this ContactInfo.  # noqa: E501


        :return: The state of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContactInfo.


        :param state: The state of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def post_code(self):
        """Gets the post_code of this ContactInfo.  # noqa: E501


        :return: The post_code of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this ContactInfo.


        :param post_code: The post_code of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def country(self):
        """Gets the country of this ContactInfo.  # noqa: E501


        :return: The country of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactInfo.


        :param country: The country of this ContactInfo.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this ContactInfo.  # noqa: E501


        :return: The phone of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactInfo.


        :param phone: The phone of this ContactInfo.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def mailing_is_different(self):
        """Gets the mailing_is_different of this ContactInfo.  # noqa: E501


        :return: The mailing_is_different of this ContactInfo.  # noqa: E501
        :rtype: bool
        """
        return self._mailing_is_different

    @mailing_is_different.setter
    def mailing_is_different(self, mailing_is_different):
        """Sets the mailing_is_different of this ContactInfo.


        :param mailing_is_different: The mailing_is_different of this ContactInfo.  # noqa: E501
        :type: bool
        """

        self._mailing_is_different = mailing_is_different

    @property
    def mailing_street_address1(self):
        """Gets the mailing_street_address1 of this ContactInfo.  # noqa: E501


        :return: The mailing_street_address1 of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_street_address1

    @mailing_street_address1.setter
    def mailing_street_address1(self, mailing_street_address1):
        """Sets the mailing_street_address1 of this ContactInfo.


        :param mailing_street_address1: The mailing_street_address1 of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_street_address1 = mailing_street_address1

    @property
    def mailing_street_address2(self):
        """Gets the mailing_street_address2 of this ContactInfo.  # noqa: E501


        :return: The mailing_street_address2 of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_street_address2

    @mailing_street_address2.setter
    def mailing_street_address2(self, mailing_street_address2):
        """Sets the mailing_street_address2 of this ContactInfo.


        :param mailing_street_address2: The mailing_street_address2 of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_street_address2 = mailing_street_address2

    @property
    def mailing_city(self):
        """Gets the mailing_city of this ContactInfo.  # noqa: E501


        :return: The mailing_city of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_city

    @mailing_city.setter
    def mailing_city(self, mailing_city):
        """Sets the mailing_city of this ContactInfo.


        :param mailing_city: The mailing_city of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_city = mailing_city

    @property
    def mailing_state(self):
        """Gets the mailing_state of this ContactInfo.  # noqa: E501


        :return: The mailing_state of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_state

    @mailing_state.setter
    def mailing_state(self, mailing_state):
        """Sets the mailing_state of this ContactInfo.


        :param mailing_state: The mailing_state of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_state = mailing_state

    @property
    def mailing_post_code(self):
        """Gets the mailing_post_code of this ContactInfo.  # noqa: E501


        :return: The mailing_post_code of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_post_code

    @mailing_post_code.setter
    def mailing_post_code(self, mailing_post_code):
        """Sets the mailing_post_code of this ContactInfo.


        :param mailing_post_code: The mailing_post_code of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_post_code = mailing_post_code

    @property
    def mailing_country(self):
        """Gets the mailing_country of this ContactInfo.  # noqa: E501


        :return: The mailing_country of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._mailing_country

    @mailing_country.setter
    def mailing_country(self, mailing_country):
        """Sets the mailing_country of this ContactInfo.


        :param mailing_country: The mailing_country of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._mailing_country = mailing_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
