# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fill(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'order_id': 'int',
        'contract_id': 'int',
        'timestamp': 'datetime',
        'trade_date': 'TradeDate',
        'action': 'str',
        'qty': 'int',
        'price': 'float',
        'active': 'bool',
        'finally_paired': 'int'
    }

    attribute_map = {
        'id': 'id',
        'order_id': 'orderId',
        'contract_id': 'contractId',
        'timestamp': 'timestamp',
        'trade_date': 'tradeDate',
        'action': 'action',
        'qty': 'qty',
        'price': 'price',
        'active': 'active',
        'finally_paired': 'finallyPaired'
    }

    def __init__(self, id=None, order_id=None, contract_id=None, timestamp=None, trade_date=None, action=None, qty=None, price=None, active=None, finally_paired=None):  # noqa: E501
        """Fill - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._order_id = None
        self._contract_id = None
        self._timestamp = None
        self._trade_date = None
        self._action = None
        self._qty = None
        self._price = None
        self._active = None
        self._finally_paired = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.order_id = order_id
        self.contract_id = contract_id
        self.timestamp = timestamp
        self.trade_date = trade_date
        self.action = action
        self.qty = qty
        self.price = price
        self.active = active
        self.finally_paired = finally_paired

    @property
    def id(self):
        """Gets the id of this Fill.  # noqa: E501


        :return: The id of this Fill.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fill.


        :param id: The id of this Fill.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order_id(self):
        """Gets the order_id of this Fill.  # noqa: E501


        :return: The order_id of this Fill.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Fill.


        :param order_id: The order_id of this Fill.  # noqa: E501
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def contract_id(self):
        """Gets the contract_id of this Fill.  # noqa: E501


        :return: The contract_id of this Fill.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Fill.


        :param contract_id: The contract_id of this Fill.  # noqa: E501
        :type: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Fill.  # noqa: E501


        :return: The timestamp of this Fill.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Fill.


        :param timestamp: The timestamp of this Fill.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def trade_date(self):
        """Gets the trade_date of this Fill.  # noqa: E501


        :return: The trade_date of this Fill.  # noqa: E501
        :rtype: TradeDate
        """
        return self._trade_date

    @trade_date.setter
    def trade_date(self, trade_date):
        """Sets the trade_date of this Fill.


        :param trade_date: The trade_date of this Fill.  # noqa: E501
        :type: TradeDate
        """
        if trade_date is None:
            raise ValueError("Invalid value for `trade_date`, must not be `None`")  # noqa: E501

        self._trade_date = trade_date

    @property
    def action(self):
        """Gets the action of this Fill.  # noqa: E501

        Buy, Sell  # noqa: E501

        :return: The action of this Fill.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Fill.

        Buy, Sell  # noqa: E501

        :param action: The action of this Fill.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["Buy", "Sell"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def qty(self):
        """Gets the qty of this Fill.  # noqa: E501


        :return: The qty of this Fill.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Fill.


        :param qty: The qty of this Fill.  # noqa: E501
        :type: int
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def price(self):
        """Gets the price of this Fill.  # noqa: E501


        :return: The price of this Fill.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Fill.


        :param price: The price of this Fill.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def active(self):
        """Gets the active of this Fill.  # noqa: E501


        :return: The active of this Fill.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Fill.


        :param active: The active of this Fill.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def finally_paired(self):
        """Gets the finally_paired of this Fill.  # noqa: E501


        :return: The finally_paired of this Fill.  # noqa: E501
        :rtype: int
        """
        return self._finally_paired

    @finally_paired.setter
    def finally_paired(self, finally_paired):
        """Sets the finally_paired of this Fill.


        :param finally_paired: The finally_paired of this Fill.  # noqa: E501
        :type: int
        """
        if finally_paired is None:
            raise ValueError("Invalid value for `finally_paired`, must not be `None`")  # noqa: E501

        self._finally_paired = finally_paired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fill, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fill):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
