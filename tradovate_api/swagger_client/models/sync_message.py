# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyncMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'users': 'list[User]',
        'accounts': 'list[Account]',
        'account_risk_statuses': 'list[AccountRiskStatus]',
        'margin_snapshots': 'list[MarginSnapshot]',
        'user_account_auto_liqs': 'list[UserAccountAutoLiq]',
        'cash_balances': 'list[CashBalance]',
        'currencies': 'list[Currency]',
        'positions': 'list[Position]',
        'fill_pairs': 'list[FillPair]',
        'orders': 'list[Order]',
        'contracts': 'list[Contract]',
        'contract_maturities': 'list[ContractMaturity]',
        'products': 'list[Product]',
        'exchanges': 'list[Exchange]',
        'spread_definitions': 'list[SpreadDefinition]',
        'commands': 'list[Command]',
        'command_reports': 'list[CommandReport]',
        'execution_reports': 'list[ExecutionReport]',
        'order_versions': 'list[OrderVersion]',
        'fills': 'list[Fill]',
        'order_strategies': 'list[OrderStrategy]',
        'order_strategy_links': 'list[OrderStrategyLink]',
        'user_properties': 'list[UserProperty]',
        'properties': 'list[ModelProperty]',
        'user_plugins': 'list[UserPlugin]',
        'contract_groups': 'list[ContractGroup]',
        'order_strategy_types': 'list[OrderStrategyType]'
    }

    attribute_map = {
        'users': 'users',
        'accounts': 'accounts',
        'account_risk_statuses': 'accountRiskStatuses',
        'margin_snapshots': 'marginSnapshots',
        'user_account_auto_liqs': 'userAccountAutoLiqs',
        'cash_balances': 'cashBalances',
        'currencies': 'currencies',
        'positions': 'positions',
        'fill_pairs': 'fillPairs',
        'orders': 'orders',
        'contracts': 'contracts',
        'contract_maturities': 'contractMaturities',
        'products': 'products',
        'exchanges': 'exchanges',
        'spread_definitions': 'spreadDefinitions',
        'commands': 'commands',
        'command_reports': 'commandReports',
        'execution_reports': 'executionReports',
        'order_versions': 'orderVersions',
        'fills': 'fills',
        'order_strategies': 'orderStrategies',
        'order_strategy_links': 'orderStrategyLinks',
        'user_properties': 'userProperties',
        'properties': 'properties',
        'user_plugins': 'userPlugins',
        'contract_groups': 'contractGroups',
        'order_strategy_types': 'orderStrategyTypes'
    }

    def __init__(self, users=None, accounts=None, account_risk_statuses=None, margin_snapshots=None, user_account_auto_liqs=None, cash_balances=None, currencies=None, positions=None, fill_pairs=None, orders=None, contracts=None, contract_maturities=None, products=None, exchanges=None, spread_definitions=None, commands=None, command_reports=None, execution_reports=None, order_versions=None, fills=None, order_strategies=None, order_strategy_links=None, user_properties=None, properties=None, user_plugins=None, contract_groups=None, order_strategy_types=None):  # noqa: E501
        """SyncMessage - a model defined in Swagger"""  # noqa: E501
        self._users = None
        self._accounts = None
        self._account_risk_statuses = None
        self._margin_snapshots = None
        self._user_account_auto_liqs = None
        self._cash_balances = None
        self._currencies = None
        self._positions = None
        self._fill_pairs = None
        self._orders = None
        self._contracts = None
        self._contract_maturities = None
        self._products = None
        self._exchanges = None
        self._spread_definitions = None
        self._commands = None
        self._command_reports = None
        self._execution_reports = None
        self._order_versions = None
        self._fills = None
        self._order_strategies = None
        self._order_strategy_links = None
        self._user_properties = None
        self._properties = None
        self._user_plugins = None
        self._contract_groups = None
        self._order_strategy_types = None
        self.discriminator = None
        self.users = users
        if accounts is not None:
            self.accounts = accounts
        if account_risk_statuses is not None:
            self.account_risk_statuses = account_risk_statuses
        if margin_snapshots is not None:
            self.margin_snapshots = margin_snapshots
        if user_account_auto_liqs is not None:
            self.user_account_auto_liqs = user_account_auto_liqs
        if cash_balances is not None:
            self.cash_balances = cash_balances
        if currencies is not None:
            self.currencies = currencies
        if positions is not None:
            self.positions = positions
        if fill_pairs is not None:
            self.fill_pairs = fill_pairs
        if orders is not None:
            self.orders = orders
        if contracts is not None:
            self.contracts = contracts
        if contract_maturities is not None:
            self.contract_maturities = contract_maturities
        if products is not None:
            self.products = products
        if exchanges is not None:
            self.exchanges = exchanges
        if spread_definitions is not None:
            self.spread_definitions = spread_definitions
        if commands is not None:
            self.commands = commands
        if command_reports is not None:
            self.command_reports = command_reports
        if execution_reports is not None:
            self.execution_reports = execution_reports
        if order_versions is not None:
            self.order_versions = order_versions
        if fills is not None:
            self.fills = fills
        if order_strategies is not None:
            self.order_strategies = order_strategies
        if order_strategy_links is not None:
            self.order_strategy_links = order_strategy_links
        if user_properties is not None:
            self.user_properties = user_properties
        if properties is not None:
            self.properties = properties
        if user_plugins is not None:
            self.user_plugins = user_plugins
        self.contract_groups = contract_groups
        if order_strategy_types is not None:
            self.order_strategy_types = order_strategy_types

    @property
    def users(self):
        """Gets the users of this SyncMessage.  # noqa: E501


        :return: The users of this SyncMessage.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this SyncMessage.


        :param users: The users of this SyncMessage.  # noqa: E501
        :type: list[User]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def accounts(self):
        """Gets the accounts of this SyncMessage.  # noqa: E501


        :return: The accounts of this SyncMessage.  # noqa: E501
        :rtype: list[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SyncMessage.


        :param accounts: The accounts of this SyncMessage.  # noqa: E501
        :type: list[Account]
        """

        self._accounts = accounts

    @property
    def account_risk_statuses(self):
        """Gets the account_risk_statuses of this SyncMessage.  # noqa: E501


        :return: The account_risk_statuses of this SyncMessage.  # noqa: E501
        :rtype: list[AccountRiskStatus]
        """
        return self._account_risk_statuses

    @account_risk_statuses.setter
    def account_risk_statuses(self, account_risk_statuses):
        """Sets the account_risk_statuses of this SyncMessage.


        :param account_risk_statuses: The account_risk_statuses of this SyncMessage.  # noqa: E501
        :type: list[AccountRiskStatus]
        """

        self._account_risk_statuses = account_risk_statuses

    @property
    def margin_snapshots(self):
        """Gets the margin_snapshots of this SyncMessage.  # noqa: E501


        :return: The margin_snapshots of this SyncMessage.  # noqa: E501
        :rtype: list[MarginSnapshot]
        """
        return self._margin_snapshots

    @margin_snapshots.setter
    def margin_snapshots(self, margin_snapshots):
        """Sets the margin_snapshots of this SyncMessage.


        :param margin_snapshots: The margin_snapshots of this SyncMessage.  # noqa: E501
        :type: list[MarginSnapshot]
        """

        self._margin_snapshots = margin_snapshots

    @property
    def user_account_auto_liqs(self):
        """Gets the user_account_auto_liqs of this SyncMessage.  # noqa: E501


        :return: The user_account_auto_liqs of this SyncMessage.  # noqa: E501
        :rtype: list[UserAccountAutoLiq]
        """
        return self._user_account_auto_liqs

    @user_account_auto_liqs.setter
    def user_account_auto_liqs(self, user_account_auto_liqs):
        """Sets the user_account_auto_liqs of this SyncMessage.


        :param user_account_auto_liqs: The user_account_auto_liqs of this SyncMessage.  # noqa: E501
        :type: list[UserAccountAutoLiq]
        """

        self._user_account_auto_liqs = user_account_auto_liqs

    @property
    def cash_balances(self):
        """Gets the cash_balances of this SyncMessage.  # noqa: E501


        :return: The cash_balances of this SyncMessage.  # noqa: E501
        :rtype: list[CashBalance]
        """
        return self._cash_balances

    @cash_balances.setter
    def cash_balances(self, cash_balances):
        """Sets the cash_balances of this SyncMessage.


        :param cash_balances: The cash_balances of this SyncMessage.  # noqa: E501
        :type: list[CashBalance]
        """

        self._cash_balances = cash_balances

    @property
    def currencies(self):
        """Gets the currencies of this SyncMessage.  # noqa: E501


        :return: The currencies of this SyncMessage.  # noqa: E501
        :rtype: list[Currency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this SyncMessage.


        :param currencies: The currencies of this SyncMessage.  # noqa: E501
        :type: list[Currency]
        """

        self._currencies = currencies

    @property
    def positions(self):
        """Gets the positions of this SyncMessage.  # noqa: E501


        :return: The positions of this SyncMessage.  # noqa: E501
        :rtype: list[Position]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this SyncMessage.


        :param positions: The positions of this SyncMessage.  # noqa: E501
        :type: list[Position]
        """

        self._positions = positions

    @property
    def fill_pairs(self):
        """Gets the fill_pairs of this SyncMessage.  # noqa: E501


        :return: The fill_pairs of this SyncMessage.  # noqa: E501
        :rtype: list[FillPair]
        """
        return self._fill_pairs

    @fill_pairs.setter
    def fill_pairs(self, fill_pairs):
        """Sets the fill_pairs of this SyncMessage.


        :param fill_pairs: The fill_pairs of this SyncMessage.  # noqa: E501
        :type: list[FillPair]
        """

        self._fill_pairs = fill_pairs

    @property
    def orders(self):
        """Gets the orders of this SyncMessage.  # noqa: E501


        :return: The orders of this SyncMessage.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this SyncMessage.


        :param orders: The orders of this SyncMessage.  # noqa: E501
        :type: list[Order]
        """

        self._orders = orders

    @property
    def contracts(self):
        """Gets the contracts of this SyncMessage.  # noqa: E501


        :return: The contracts of this SyncMessage.  # noqa: E501
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this SyncMessage.


        :param contracts: The contracts of this SyncMessage.  # noqa: E501
        :type: list[Contract]
        """

        self._contracts = contracts

    @property
    def contract_maturities(self):
        """Gets the contract_maturities of this SyncMessage.  # noqa: E501


        :return: The contract_maturities of this SyncMessage.  # noqa: E501
        :rtype: list[ContractMaturity]
        """
        return self._contract_maturities

    @contract_maturities.setter
    def contract_maturities(self, contract_maturities):
        """Sets the contract_maturities of this SyncMessage.


        :param contract_maturities: The contract_maturities of this SyncMessage.  # noqa: E501
        :type: list[ContractMaturity]
        """

        self._contract_maturities = contract_maturities

    @property
    def products(self):
        """Gets the products of this SyncMessage.  # noqa: E501


        :return: The products of this SyncMessage.  # noqa: E501
        :rtype: list[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this SyncMessage.


        :param products: The products of this SyncMessage.  # noqa: E501
        :type: list[Product]
        """

        self._products = products

    @property
    def exchanges(self):
        """Gets the exchanges of this SyncMessage.  # noqa: E501


        :return: The exchanges of this SyncMessage.  # noqa: E501
        :rtype: list[Exchange]
        """
        return self._exchanges

    @exchanges.setter
    def exchanges(self, exchanges):
        """Sets the exchanges of this SyncMessage.


        :param exchanges: The exchanges of this SyncMessage.  # noqa: E501
        :type: list[Exchange]
        """

        self._exchanges = exchanges

    @property
    def spread_definitions(self):
        """Gets the spread_definitions of this SyncMessage.  # noqa: E501


        :return: The spread_definitions of this SyncMessage.  # noqa: E501
        :rtype: list[SpreadDefinition]
        """
        return self._spread_definitions

    @spread_definitions.setter
    def spread_definitions(self, spread_definitions):
        """Sets the spread_definitions of this SyncMessage.


        :param spread_definitions: The spread_definitions of this SyncMessage.  # noqa: E501
        :type: list[SpreadDefinition]
        """

        self._spread_definitions = spread_definitions

    @property
    def commands(self):
        """Gets the commands of this SyncMessage.  # noqa: E501


        :return: The commands of this SyncMessage.  # noqa: E501
        :rtype: list[Command]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this SyncMessage.


        :param commands: The commands of this SyncMessage.  # noqa: E501
        :type: list[Command]
        """

        self._commands = commands

    @property
    def command_reports(self):
        """Gets the command_reports of this SyncMessage.  # noqa: E501


        :return: The command_reports of this SyncMessage.  # noqa: E501
        :rtype: list[CommandReport]
        """
        return self._command_reports

    @command_reports.setter
    def command_reports(self, command_reports):
        """Sets the command_reports of this SyncMessage.


        :param command_reports: The command_reports of this SyncMessage.  # noqa: E501
        :type: list[CommandReport]
        """

        self._command_reports = command_reports

    @property
    def execution_reports(self):
        """Gets the execution_reports of this SyncMessage.  # noqa: E501


        :return: The execution_reports of this SyncMessage.  # noqa: E501
        :rtype: list[ExecutionReport]
        """
        return self._execution_reports

    @execution_reports.setter
    def execution_reports(self, execution_reports):
        """Sets the execution_reports of this SyncMessage.


        :param execution_reports: The execution_reports of this SyncMessage.  # noqa: E501
        :type: list[ExecutionReport]
        """

        self._execution_reports = execution_reports

    @property
    def order_versions(self):
        """Gets the order_versions of this SyncMessage.  # noqa: E501


        :return: The order_versions of this SyncMessage.  # noqa: E501
        :rtype: list[OrderVersion]
        """
        return self._order_versions

    @order_versions.setter
    def order_versions(self, order_versions):
        """Sets the order_versions of this SyncMessage.


        :param order_versions: The order_versions of this SyncMessage.  # noqa: E501
        :type: list[OrderVersion]
        """

        self._order_versions = order_versions

    @property
    def fills(self):
        """Gets the fills of this SyncMessage.  # noqa: E501


        :return: The fills of this SyncMessage.  # noqa: E501
        :rtype: list[Fill]
        """
        return self._fills

    @fills.setter
    def fills(self, fills):
        """Sets the fills of this SyncMessage.


        :param fills: The fills of this SyncMessage.  # noqa: E501
        :type: list[Fill]
        """

        self._fills = fills

    @property
    def order_strategies(self):
        """Gets the order_strategies of this SyncMessage.  # noqa: E501


        :return: The order_strategies of this SyncMessage.  # noqa: E501
        :rtype: list[OrderStrategy]
        """
        return self._order_strategies

    @order_strategies.setter
    def order_strategies(self, order_strategies):
        """Sets the order_strategies of this SyncMessage.


        :param order_strategies: The order_strategies of this SyncMessage.  # noqa: E501
        :type: list[OrderStrategy]
        """

        self._order_strategies = order_strategies

    @property
    def order_strategy_links(self):
        """Gets the order_strategy_links of this SyncMessage.  # noqa: E501


        :return: The order_strategy_links of this SyncMessage.  # noqa: E501
        :rtype: list[OrderStrategyLink]
        """
        return self._order_strategy_links

    @order_strategy_links.setter
    def order_strategy_links(self, order_strategy_links):
        """Sets the order_strategy_links of this SyncMessage.


        :param order_strategy_links: The order_strategy_links of this SyncMessage.  # noqa: E501
        :type: list[OrderStrategyLink]
        """

        self._order_strategy_links = order_strategy_links

    @property
    def user_properties(self):
        """Gets the user_properties of this SyncMessage.  # noqa: E501


        :return: The user_properties of this SyncMessage.  # noqa: E501
        :rtype: list[UserProperty]
        """
        return self._user_properties

    @user_properties.setter
    def user_properties(self, user_properties):
        """Sets the user_properties of this SyncMessage.


        :param user_properties: The user_properties of this SyncMessage.  # noqa: E501
        :type: list[UserProperty]
        """

        self._user_properties = user_properties

    @property
    def properties(self):
        """Gets the properties of this SyncMessage.  # noqa: E501


        :return: The properties of this SyncMessage.  # noqa: E501
        :rtype: list[ModelProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SyncMessage.


        :param properties: The properties of this SyncMessage.  # noqa: E501
        :type: list[ModelProperty]
        """

        self._properties = properties

    @property
    def user_plugins(self):
        """Gets the user_plugins of this SyncMessage.  # noqa: E501


        :return: The user_plugins of this SyncMessage.  # noqa: E501
        :rtype: list[UserPlugin]
        """
        return self._user_plugins

    @user_plugins.setter
    def user_plugins(self, user_plugins):
        """Sets the user_plugins of this SyncMessage.


        :param user_plugins: The user_plugins of this SyncMessage.  # noqa: E501
        :type: list[UserPlugin]
        """

        self._user_plugins = user_plugins

    @property
    def contract_groups(self):
        """Gets the contract_groups of this SyncMessage.  # noqa: E501


        :return: The contract_groups of this SyncMessage.  # noqa: E501
        :rtype: list[ContractGroup]
        """
        return self._contract_groups

    @contract_groups.setter
    def contract_groups(self, contract_groups):
        """Sets the contract_groups of this SyncMessage.


        :param contract_groups: The contract_groups of this SyncMessage.  # noqa: E501
        :type: list[ContractGroup]
        """
        if contract_groups is None:
            raise ValueError("Invalid value for `contract_groups`, must not be `None`")  # noqa: E501

        self._contract_groups = contract_groups

    @property
    def order_strategy_types(self):
        """Gets the order_strategy_types of this SyncMessage.  # noqa: E501


        :return: The order_strategy_types of this SyncMessage.  # noqa: E501
        :rtype: list[OrderStrategyType]
        """
        return self._order_strategy_types

    @order_strategy_types.setter
    def order_strategy_types(self, order_strategy_types):
        """Sets the order_strategy_types of this SyncMessage.


        :param order_strategy_types: The order_strategy_types of this SyncMessage.  # noqa: E501
        :type: list[OrderStrategyType]
        """

        self._order_strategy_types = order_strategy_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
