# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderStrategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'timestamp': 'datetime',
        'contract_id': 'int',
        'order_strategy_type_id': 'int',
        'initiator_id': 'int',
        'action': 'str',
        'params': 'str',
        'uuid': 'str',
        'status': 'str',
        'failure_message': 'str',
        'sender_id': 'int',
        'custom_tag50': 'str',
        'user_session_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'timestamp': 'timestamp',
        'contract_id': 'contractId',
        'order_strategy_type_id': 'orderStrategyTypeId',
        'initiator_id': 'initiatorId',
        'action': 'action',
        'params': 'params',
        'uuid': 'uuid',
        'status': 'status',
        'failure_message': 'failureMessage',
        'sender_id': 'senderId',
        'custom_tag50': 'customTag50',
        'user_session_id': 'userSessionId'
    }

    def __init__(self, id=None, account_id=None, timestamp=None, contract_id=None, order_strategy_type_id=None, initiator_id=None, action=None, params=None, uuid=None, status=None, failure_message=None, sender_id=None, custom_tag50=None, user_session_id=None):  # noqa: E501
        """OrderStrategy - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._timestamp = None
        self._contract_id = None
        self._order_strategy_type_id = None
        self._initiator_id = None
        self._action = None
        self._params = None
        self._uuid = None
        self._status = None
        self._failure_message = None
        self._sender_id = None
        self._custom_tag50 = None
        self._user_session_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.account_id = account_id
        self.timestamp = timestamp
        self.contract_id = contract_id
        self.order_strategy_type_id = order_strategy_type_id
        if initiator_id is not None:
            self.initiator_id = initiator_id
        self.action = action
        if params is not None:
            self.params = params
        if uuid is not None:
            self.uuid = uuid
        self.status = status
        if failure_message is not None:
            self.failure_message = failure_message
        if sender_id is not None:
            self.sender_id = sender_id
        if custom_tag50 is not None:
            self.custom_tag50 = custom_tag50
        if user_session_id is not None:
            self.user_session_id = user_session_id

    @property
    def id(self):
        """Gets the id of this OrderStrategy.  # noqa: E501


        :return: The id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderStrategy.


        :param id: The id of this OrderStrategy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this OrderStrategy.  # noqa: E501


        :return: The account_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OrderStrategy.


        :param account_id: The account_id of this OrderStrategy.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def timestamp(self):
        """Gets the timestamp of this OrderStrategy.  # noqa: E501


        :return: The timestamp of this OrderStrategy.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OrderStrategy.


        :param timestamp: The timestamp of this OrderStrategy.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def contract_id(self):
        """Gets the contract_id of this OrderStrategy.  # noqa: E501


        :return: The contract_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this OrderStrategy.


        :param contract_id: The contract_id of this OrderStrategy.  # noqa: E501
        :type: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def order_strategy_type_id(self):
        """Gets the order_strategy_type_id of this OrderStrategy.  # noqa: E501


        :return: The order_strategy_type_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._order_strategy_type_id

    @order_strategy_type_id.setter
    def order_strategy_type_id(self, order_strategy_type_id):
        """Sets the order_strategy_type_id of this OrderStrategy.


        :param order_strategy_type_id: The order_strategy_type_id of this OrderStrategy.  # noqa: E501
        :type: int
        """
        if order_strategy_type_id is None:
            raise ValueError("Invalid value for `order_strategy_type_id`, must not be `None`")  # noqa: E501

        self._order_strategy_type_id = order_strategy_type_id

    @property
    def initiator_id(self):
        """Gets the initiator_id of this OrderStrategy.  # noqa: E501


        :return: The initiator_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._initiator_id

    @initiator_id.setter
    def initiator_id(self, initiator_id):
        """Sets the initiator_id of this OrderStrategy.


        :param initiator_id: The initiator_id of this OrderStrategy.  # noqa: E501
        :type: int
        """

        self._initiator_id = initiator_id

    @property
    def action(self):
        """Gets the action of this OrderStrategy.  # noqa: E501

        Buy, Sell  # noqa: E501

        :return: The action of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OrderStrategy.

        Buy, Sell  # noqa: E501

        :param action: The action of this OrderStrategy.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["Buy", "Sell"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def params(self):
        """Gets the params of this OrderStrategy.  # noqa: E501


        :return: The params of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this OrderStrategy.


        :param params: The params of this OrderStrategy.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def uuid(self):
        """Gets the uuid of this OrderStrategy.  # noqa: E501


        :return: The uuid of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OrderStrategy.


        :param uuid: The uuid of this OrderStrategy.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def status(self):
        """Gets the status of this OrderStrategy.  # noqa: E501

        ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser  # noqa: E501

        :return: The status of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderStrategy.

        ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser  # noqa: E501

        :param status: The status of this OrderStrategy.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ActiveStrategy", "ExecutionFailed", "ExecutionFinished", "ExecutionInterrupted", "InactiveStrategy", "NotEnoughLiquidity", "StoppedByUser"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failure_message(self):
        """Gets the failure_message of this OrderStrategy.  # noqa: E501


        :return: The failure_message of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this OrderStrategy.


        :param failure_message: The failure_message of this OrderStrategy.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def sender_id(self):
        """Gets the sender_id of this OrderStrategy.  # noqa: E501


        :return: The sender_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this OrderStrategy.


        :param sender_id: The sender_id of this OrderStrategy.  # noqa: E501
        :type: int
        """

        self._sender_id = sender_id

    @property
    def custom_tag50(self):
        """Gets the custom_tag50 of this OrderStrategy.  # noqa: E501


        :return: The custom_tag50 of this OrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._custom_tag50

    @custom_tag50.setter
    def custom_tag50(self, custom_tag50):
        """Sets the custom_tag50 of this OrderStrategy.


        :param custom_tag50: The custom_tag50 of this OrderStrategy.  # noqa: E501
        :type: str
        """

        self._custom_tag50 = custom_tag50

    @property
    def user_session_id(self):
        """Gets the user_session_id of this OrderStrategy.  # noqa: E501


        :return: The user_session_id of this OrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._user_session_id

    @user_session_id.setter
    def user_session_id(self, user_session_id):
        """Sets the user_session_id of this OrderStrategy.


        :param user_session_id: The user_session_id of this OrderStrategy.  # noqa: E501
        :type: int
        """

        self._user_session_id = user_session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderStrategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
