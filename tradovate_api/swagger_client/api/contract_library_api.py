# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ContractLibraryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def contract_dependents(self, masterid, **kwargs):  # noqa: E501
        """contract_dependents  # noqa: E501

        Retrieves all entities of Contract type related to ContractMaturity entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of ContractMaturity entity (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def contract_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """contract_dependents  # noqa: E501

        Retrieves all entities of Contract type related to ContractMaturity entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of ContractMaturity entity (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `contract_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contract]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_find(self, name, **kwargs):  # noqa: E501
        """contract_find  # noqa: E501

        Retrieves an entity of Contract type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def contract_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """contract_find  # noqa: E501

        Retrieves an entity of Contract type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `contract_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_group_find(self, name, **kwargs):  # noqa: E501
        """contract_group_find  # noqa: E501

        Retrieves an entity of ContractGroup type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ContractGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_group_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_group_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def contract_group_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """contract_group_find  # noqa: E501

        Retrieves an entity of ContractGroup type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ContractGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_group_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `contract_group_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractGroup/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContractGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_group_item(self, id, **kwargs):  # noqa: E501
        """contract_group_item  # noqa: E501

        Retrieves an entity of ContractGroup type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_group_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_group_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def contract_group_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """contract_group_item  # noqa: E501

        Retrieves an entity of ContractGroup type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_group_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `contract_group_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractGroup/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContractGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_group_items(self, ids, **kwargs):  # noqa: E501
        """contract_group_items  # noqa: E501

        Retrieves multiple entities of ContractGroup type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_group_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_group_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def contract_group_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """contract_group_items  # noqa: E501

        Retrieves multiple entities of ContractGroup type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_group_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `contract_group_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractGroup/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_group_list(self, **kwargs):  # noqa: E501
        """contract_group_list  # noqa: E501

        Retrieves all entities of ContractGroup type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_group_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.contract_group_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def contract_group_list_with_http_info(self, **kwargs):  # noqa: E501
        """contract_group_list  # noqa: E501

        Retrieves all entities of ContractGroup type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_group_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractGroup/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_group_suggest(self, t, l, **kwargs):  # noqa: E501
        """contract_group_suggest  # noqa: E501

        Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_group_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_group_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def contract_group_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """contract_group_suggest  # noqa: E501

        Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_group_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ContractGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_group_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `contract_group_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `contract_group_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractGroup/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_item(self, id, **kwargs):  # noqa: E501
        """contract_item  # noqa: E501

        Retrieves an entity of Contract type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def contract_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """contract_item  # noqa: E501

        Retrieves an entity of Contract type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `contract_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_items(self, ids, **kwargs):  # noqa: E501
        """contract_items  # noqa: E501

        Retrieves multiple entities of Contract type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def contract_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """contract_items  # noqa: E501

        Retrieves multiple entities of Contract type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `contract_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contract]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """contract_l_dependents  # noqa: E501

        Retrieves all entities of Contract type related to multiple entities of ContractMaturity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of ContractMaturity entities (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def contract_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """contract_l_dependents  # noqa: E501

        Retrieves all entities of Contract type related to multiple entities of ContractMaturity type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of ContractMaturity entities (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `contract_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contract]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_maturity_dependents(self, masterid, **kwargs):  # noqa: E501
        """contract_maturity_dependents  # noqa: E501

        Retrieves all entities of ContractMaturity type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_maturity_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_maturity_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def contract_maturity_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """contract_maturity_dependents  # noqa: E501

        Retrieves all entities of ContractMaturity type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_maturity_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `contract_maturity_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMaturity/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMaturity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_maturity_item(self, id, **kwargs):  # noqa: E501
        """contract_maturity_item  # noqa: E501

        Retrieves an entity of ContractMaturity type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractMaturity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_maturity_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_maturity_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def contract_maturity_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """contract_maturity_item  # noqa: E501

        Retrieves an entity of ContractMaturity type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractMaturity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_maturity_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `contract_maturity_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMaturity/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContractMaturity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_maturity_items(self, ids, **kwargs):  # noqa: E501
        """contract_maturity_items  # noqa: E501

        Retrieves multiple entities of ContractMaturity type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_maturity_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_maturity_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def contract_maturity_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """contract_maturity_items  # noqa: E501

        Retrieves multiple entities of ContractMaturity type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_maturity_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `contract_maturity_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMaturity/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMaturity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_maturity_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """contract_maturity_l_dependents  # noqa: E501

        Retrieves all entities of ContractMaturity type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_maturity_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_maturity_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def contract_maturity_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """contract_maturity_l_dependents  # noqa: E501

        Retrieves all entities of ContractMaturity type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_maturity_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ContractMaturity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_maturity_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `contract_maturity_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMaturity/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMaturity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_suggest(self, t, l, **kwargs):  # noqa: E501
        """contract_suggest  # noqa: E501

        Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def contract_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """contract_suggest  # noqa: E501

        Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `contract_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `contract_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contract]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_find(self, name, **kwargs):  # noqa: E501
        """currency_find  # noqa: E501

        Retrieves an entity of Currency type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Currency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def currency_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """currency_find  # noqa: E501

        Retrieves an entity of Currency type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Currency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `currency_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currency/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Currency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_item(self, id, **kwargs):  # noqa: E501
        """currency_item  # noqa: E501

        Retrieves an entity of Currency type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Currency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def currency_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """currency_item  # noqa: E501

        Retrieves an entity of Currency type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Currency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `currency_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currency/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Currency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_items(self, ids, **kwargs):  # noqa: E501
        """currency_items  # noqa: E501

        Retrieves multiple entities of Currency type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def currency_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """currency_items  # noqa: E501

        Retrieves multiple entities of Currency type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `currency_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currency/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Currency]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_list(self, **kwargs):  # noqa: E501
        """currency_list  # noqa: E501

        Retrieves all entities of Currency type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.currency_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def currency_list_with_http_info(self, **kwargs):  # noqa: E501
        """currency_list  # noqa: E501

        Retrieves all entities of Currency type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currency/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Currency]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_rate_dependents(self, masterid, **kwargs):  # noqa: E501
        """currency_rate_dependents  # noqa: E501

        Retrieves all entities of CurrencyRate type related to Currency entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Currency entity (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_rate_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_rate_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def currency_rate_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """currency_rate_dependents  # noqa: E501

        Retrieves all entities of CurrencyRate type related to Currency entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Currency entity (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_rate_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `currency_rate_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currencyRate/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CurrencyRate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_rate_item(self, id, **kwargs):  # noqa: E501
        """currency_rate_item  # noqa: E501

        Retrieves an entity of CurrencyRate type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CurrencyRate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_rate_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_rate_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def currency_rate_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """currency_rate_item  # noqa: E501

        Retrieves an entity of CurrencyRate type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CurrencyRate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_rate_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `currency_rate_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currencyRate/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurrencyRate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_rate_items(self, ids, **kwargs):  # noqa: E501
        """currency_rate_items  # noqa: E501

        Retrieves multiple entities of CurrencyRate type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_rate_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_rate_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def currency_rate_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """currency_rate_items  # noqa: E501

        Retrieves multiple entities of CurrencyRate type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_rate_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `currency_rate_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currencyRate/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CurrencyRate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_rate_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """currency_rate_l_dependents  # noqa: E501

        Retrieves all entities of CurrencyRate type related to multiple entities of Currency type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Currency entities (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_rate_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_rate_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def currency_rate_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """currency_rate_l_dependents  # noqa: E501

        Retrieves all entities of CurrencyRate type related to multiple entities of Currency type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Currency entities (required)
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_rate_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `currency_rate_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currencyRate/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CurrencyRate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_rate_list(self, **kwargs):  # noqa: E501
        """currency_rate_list  # noqa: E501

        Retrieves all entities of CurrencyRate type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_rate_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.currency_rate_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def currency_rate_list_with_http_info(self, **kwargs):  # noqa: E501
        """currency_rate_list  # noqa: E501

        Retrieves all entities of CurrencyRate type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_rate_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CurrencyRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_rate_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currencyRate/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CurrencyRate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def currency_suggest(self, t, l, **kwargs):  # noqa: E501
        """currency_suggest  # noqa: E501

        Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.currency_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.currency_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def currency_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """currency_suggest  # noqa: E501

        Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.currency_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Currency]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `currency_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `currency_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/currency/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Currency]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_find(self, name, **kwargs):  # noqa: E501
        """exchange_find  # noqa: E501

        Retrieves an entity of Exchange type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Exchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def exchange_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """exchange_find  # noqa: E501

        Retrieves an entity of Exchange type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Exchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `exchange_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Exchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_item(self, id, **kwargs):  # noqa: E501
        """exchange_item  # noqa: E501

        Retrieves an entity of Exchange type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Exchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exchange_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """exchange_item  # noqa: E501

        Retrieves an entity of Exchange type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Exchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exchange_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Exchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_items(self, ids, **kwargs):  # noqa: E501
        """exchange_items  # noqa: E501

        Retrieves multiple entities of Exchange type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def exchange_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """exchange_items  # noqa: E501

        Retrieves multiple entities of Exchange type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `exchange_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Exchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_list(self, **kwargs):  # noqa: E501
        """exchange_list  # noqa: E501

        Retrieves all entities of Exchange type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exchange_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def exchange_list_with_http_info(self, **kwargs):  # noqa: E501
        """exchange_list  # noqa: E501

        Retrieves all entities of Exchange type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Exchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_suggest(self, t, l, **kwargs):  # noqa: E501
        """exchange_suggest  # noqa: E501

        Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def exchange_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """exchange_suggest  # noqa: E501

        Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `exchange_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `exchange_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Exchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_fee_params(self, body, **kwargs):  # noqa: E501
        """get_product_fee_params  # noqa: E501

        ### Query the a product's fee parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_fee_params(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetProductFeeParams body: (required)
        :return: ProductFeeParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_fee_params_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_fee_params_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_product_fee_params_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_product_fee_params  # noqa: E501

        ### Query the a product's fee parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_fee_params_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetProductFeeParams body: (required)
        :return: ProductFeeParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_fee_params" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_product_fee_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/getproductfeeparams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductFeeParamsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_dependents(self, masterid, **kwargs):  # noqa: E501
        """product_dependents  # noqa: E501

        Retrieves all entities of Product type related to Exchange entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Exchange entity (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.product_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def product_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """product_dependents  # noqa: E501

        Retrieves all entities of Product type related to Exchange entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Exchange entity (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `product_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_find(self, name, **kwargs):  # noqa: E501
        """product_find  # noqa: E501

        Retrieves an entity of Product type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.product_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def product_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """product_find  # noqa: E501

        Retrieves an entity of Product type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `product_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_item(self, id, **kwargs):  # noqa: E501
        """product_item  # noqa: E501

        Retrieves an entity of Product type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_item  # noqa: E501

        Retrieves an entity of Product type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_items(self, ids, **kwargs):  # noqa: E501
        """product_items  # noqa: E501

        Retrieves multiple entities of Product type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def product_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """product_items  # noqa: E501

        Retrieves multiple entities of Product type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `product_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """product_l_dependents  # noqa: E501

        Retrieves all entities of Product type related to multiple entities of Exchange type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Exchange entities (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def product_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """product_l_dependents  # noqa: E501

        Retrieves all entities of Product type related to multiple entities of Exchange type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Exchange entities (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `product_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_list(self, **kwargs):  # noqa: E501
        """product_list  # noqa: E501

        Retrieves all entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_list  # noqa: E501

        Retrieves all entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_session_dependents(self, masterid, **kwargs):  # noqa: E501
        """product_session_dependents  # noqa: E501

        Retrieves all entities of ProductSession type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_session_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.product_session_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def product_session_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """product_session_dependents  # noqa: E501

        Retrieves all entities of ProductSession type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_session_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `product_session_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productSession/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_session_item(self, id, **kwargs):  # noqa: E501
        """product_session_item  # noqa: E501

        Retrieves an entity of ProductSession type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ProductSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_session_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_session_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_session_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_session_item  # noqa: E501

        Retrieves an entity of ProductSession type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ProductSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_session_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_session_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productSession/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_session_items(self, ids, **kwargs):  # noqa: E501
        """product_session_items  # noqa: E501

        Retrieves multiple entities of ProductSession type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_session_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_session_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def product_session_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """product_session_items  # noqa: E501

        Retrieves multiple entities of ProductSession type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_session_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `product_session_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productSession/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_session_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """product_session_l_dependents  # noqa: E501

        Retrieves all entities of ProductSession type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_session_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_session_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def product_session_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """product_session_l_dependents  # noqa: E501

        Retrieves all entities of ProductSession type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_session_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ProductSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_session_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `product_session_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productSession/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_suggest(self, t, l, **kwargs):  # noqa: E501
        """product_suggest  # noqa: E501

        Retrieves entities of Product type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.product_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def product_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """product_suggest  # noqa: E501

        Retrieves entities of Product type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `product_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `product_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/product/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roll_contract(self, body, **kwargs):  # noqa: E501
        """roll_contract  # noqa: E501

        ### Request the best upcoming maturity date for a given contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roll_contract(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollContract body: (required)
        :return: RollContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roll_contract_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.roll_contract_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def roll_contract_with_http_info(self, body, **kwargs):  # noqa: E501
        """roll_contract  # noqa: E501

        ### Request the best upcoming maturity date for a given contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roll_contract_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollContract body: (required)
        :return: RollContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roll_contract" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roll_contract`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contract/rollcontract', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RollContractResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def spread_definition_item(self, id, **kwargs):  # noqa: E501
        """spread_definition_item  # noqa: E501

        Retrieves an entity of SpreadDefinition type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spread_definition_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SpreadDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.spread_definition_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.spread_definition_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def spread_definition_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """spread_definition_item  # noqa: E501

        Retrieves an entity of SpreadDefinition type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spread_definition_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SpreadDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spread_definition_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `spread_definition_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/spreadDefinition/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpreadDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def spread_definition_items(self, ids, **kwargs):  # noqa: E501
        """spread_definition_items  # noqa: E501

        Retrieves multiple entities of SpreadDefinition type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spread_definition_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[SpreadDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.spread_definition_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.spread_definition_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def spread_definition_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """spread_definition_items  # noqa: E501

        Retrieves multiple entities of SpreadDefinition type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spread_definition_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[SpreadDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spread_definition_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `spread_definition_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/spreadDefinition/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SpreadDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
