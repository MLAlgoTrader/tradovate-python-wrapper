# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'ip_address': 'str',
        'app_id': 'str',
        'app_version': 'str',
        'client_app_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'ip_address': 'ipAddress',
        'app_id': 'appId',
        'app_version': 'appVersion',
        'client_app_id': 'clientAppId'
    }

    def __init__(self, id=None, user_id=None, start_time=None, end_time=None, ip_address=None, app_id=None, app_version=None, client_app_id=None):  # noqa: E501
        """UserSession - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._start_time = None
        self._end_time = None
        self._ip_address = None
        self._app_id = None
        self._app_version = None
        self._client_app_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.user_id = user_id
        self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if ip_address is not None:
            self.ip_address = ip_address
        if app_id is not None:
            self.app_id = app_id
        if app_version is not None:
            self.app_version = app_version
        self.client_app_id = client_app_id

    @property
    def id(self):
        """Gets the id of this UserSession.  # noqa: E501


        :return: The id of this UserSession.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSession.


        :param id: The id of this UserSession.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserSession.  # noqa: E501


        :return: The user_id of this UserSession.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSession.


        :param user_id: The user_id of this UserSession.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def start_time(self):
        """Gets the start_time of this UserSession.  # noqa: E501


        :return: The start_time of this UserSession.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UserSession.


        :param start_time: The start_time of this UserSession.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this UserSession.  # noqa: E501


        :return: The end_time of this UserSession.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this UserSession.


        :param end_time: The end_time of this UserSession.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def ip_address(self):
        """Gets the ip_address of this UserSession.  # noqa: E501


        :return: The ip_address of this UserSession.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UserSession.


        :param ip_address: The ip_address of this UserSession.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def app_id(self):
        """Gets the app_id of this UserSession.  # noqa: E501


        :return: The app_id of this UserSession.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this UserSession.


        :param app_id: The app_id of this UserSession.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_version(self):
        """Gets the app_version of this UserSession.  # noqa: E501


        :return: The app_version of this UserSession.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this UserSession.


        :param app_version: The app_version of this UserSession.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def client_app_id(self):
        """Gets the client_app_id of this UserSession.  # noqa: E501


        :return: The client_app_id of this UserSession.  # noqa: E501
        :rtype: int
        """
        return self._client_app_id

    @client_app_id.setter
    def client_app_id(self, client_app_id):
        """Sets the client_app_id of this UserSession.


        :param client_app_id: The client_app_id of this UserSession.  # noqa: E501
        :type: int
        """
        if client_app_id is None:
            raise ValueError("Invalid value for `client_app_id`, must not be `None`")  # noqa: E501

        self._client_app_id = client_app_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
