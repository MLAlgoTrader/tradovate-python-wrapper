# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RisksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_risk_status_dependents(self, masterid, **kwargs):  # noqa: E501
        """account_risk_status_dependents  # noqa: E501

        Retrieves all entities of AccountRiskStatus type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_risk_status_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.account_risk_status_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def account_risk_status_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """account_risk_status_dependents  # noqa: E501

        Retrieves all entities of AccountRiskStatus type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_risk_status_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `account_risk_status_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/accountRiskStatus/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRiskStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_risk_status_item(self, id, **kwargs):  # noqa: E501
        """account_risk_status_item  # noqa: E501

        Retrieves an entity of AccountRiskStatus type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountRiskStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_risk_status_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_risk_status_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def account_risk_status_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """account_risk_status_item  # noqa: E501

        Retrieves an entity of AccountRiskStatus type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountRiskStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_risk_status_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `account_risk_status_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/accountRiskStatus/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountRiskStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_risk_status_items(self, ids, **kwargs):  # noqa: E501
        """account_risk_status_items  # noqa: E501

        Retrieves multiple entities of AccountRiskStatus type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_risk_status_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.account_risk_status_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def account_risk_status_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """account_risk_status_items  # noqa: E501

        Retrieves multiple entities of AccountRiskStatus type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_risk_status_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `account_risk_status_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/accountRiskStatus/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRiskStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_risk_status_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """account_risk_status_l_dependents  # noqa: E501

        Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_risk_status_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.account_risk_status_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def account_risk_status_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """account_risk_status_l_dependents  # noqa: E501

        Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_risk_status_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `account_risk_status_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/accountRiskStatus/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRiskStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_risk_status_list(self, **kwargs):  # noqa: E501
        """account_risk_status_list  # noqa: E501

        Retrieves all entities of AccountRiskStatus type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_risk_status_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_risk_status_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_risk_status_list_with_http_info(self, **kwargs):  # noqa: E501
        """account_risk_status_list  # noqa: E501

        Retrieves all entities of AccountRiskStatus type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_risk_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRiskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_risk_status_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/accountRiskStatus/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRiskStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_margin_dependents(self, masterid, **kwargs):  # noqa: E501
        """contract_margin_dependents  # noqa: E501

        Retrieves all entities of ContractMargin type related to Contract entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Contract entity (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_margin_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_margin_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def contract_margin_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """contract_margin_dependents  # noqa: E501

        Retrieves all entities of ContractMargin type related to Contract entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Contract entity (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_margin_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `contract_margin_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMargin/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_margin_item(self, id, **kwargs):  # noqa: E501
        """contract_margin_item  # noqa: E501

        Retrieves an entity of ContractMargin type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractMargin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_margin_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_margin_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def contract_margin_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """contract_margin_item  # noqa: E501

        Retrieves an entity of ContractMargin type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ContractMargin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_margin_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `contract_margin_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMargin/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContractMargin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_margin_items(self, ids, **kwargs):  # noqa: E501
        """contract_margin_items  # noqa: E501

        Retrieves multiple entities of ContractMargin type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_margin_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_margin_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def contract_margin_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """contract_margin_items  # noqa: E501

        Retrieves multiple entities of ContractMargin type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_margin_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `contract_margin_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMargin/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contract_margin_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """contract_margin_l_dependents  # noqa: E501

        Retrieves all entities of ContractMargin type related to multiple entities of Contract type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Contract entities (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_margin_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_margin_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def contract_margin_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """contract_margin_l_dependents  # noqa: E501

        Retrieves all entities of ContractMargin type related to multiple entities of Contract type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_margin_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Contract entities (required)
        :return: list[ContractMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_margin_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `contract_margin_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/contractMargin/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_account_position_limit(self, body, **kwargs):  # noqa: E501
        """delete_user_account_position_limit  # noqa: E501

        ### Remove an account position limit for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_account_position_limit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteUserAccountPositionLimit body: (required)
        :return: DeleteResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_account_position_limit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_account_position_limit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_user_account_position_limit_with_http_info(self, body, **kwargs):  # noqa: E501
        """delete_user_account_position_limit  # noqa: E501

        ### Remove an account position limit for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_account_position_limit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteUserAccountPositionLimit body: (required)
        :return: DeleteResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_account_position_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_user_account_position_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/deleteuseraccountpositionlimit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_account_risk_parameter(self, body, **kwargs):  # noqa: E501
        """delete_user_account_risk_parameter  # noqa: E501

        ### Remove a Risk Setting parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_account_risk_parameter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteUserAccountRiskParameter body: (required)
        :return: DeleteResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_account_risk_parameter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_account_risk_parameter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_user_account_risk_parameter_with_http_info(self, body, **kwargs):  # noqa: E501
        """delete_user_account_risk_parameter  # noqa: E501

        ### Remove a Risk Setting parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_account_risk_parameter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteUserAccountRiskParameter body: (required)
        :return: DeleteResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_account_risk_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_user_account_risk_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/deleteuseraccountriskparameter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_margin_dependents(self, masterid, **kwargs):  # noqa: E501
        """product_margin_dependents  # noqa: E501

        Retrieves all entities of ProductMargin type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_margin_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.product_margin_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def product_margin_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """product_margin_dependents  # noqa: E501

        Retrieves all entities of ProductMargin type related to Product entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Product entity (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_margin_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `product_margin_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productMargin/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_margin_item(self, id, **kwargs):  # noqa: E501
        """product_margin_item  # noqa: E501

        Retrieves an entity of ProductMargin type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ProductMargin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_margin_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_margin_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_margin_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_margin_item  # noqa: E501

        Retrieves an entity of ProductMargin type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ProductMargin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_margin_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_margin_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productMargin/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductMargin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_margin_items(self, ids, **kwargs):  # noqa: E501
        """product_margin_items  # noqa: E501

        Retrieves multiple entities of ProductMargin type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_margin_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_margin_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def product_margin_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """product_margin_items  # noqa: E501

        Retrieves multiple entities of ProductMargin type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_margin_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `product_margin_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productMargin/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_margin_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """product_margin_l_dependents  # noqa: E501

        Retrieves all entities of ProductMargin type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_margin_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.product_margin_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def product_margin_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """product_margin_l_dependents  # noqa: E501

        Retrieves all entities of ProductMargin type related to multiple entities of Product type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Product entities (required)
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_margin_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `product_margin_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productMargin/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_margin_list(self, **kwargs):  # noqa: E501
        """product_margin_list  # noqa: E501

        Retrieves all entities of ProductMargin type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_margin_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_margin_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_margin_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_margin_list  # noqa: E501

        Retrieves all entities of ProductMargin type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_margin_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ProductMargin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_margin_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/productMargin/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductMargin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_create(self, body, **kwargs):  # noqa: E501
        """user_account_auto_liq_create  # noqa: E501

        Creates a new entity of UserAccountAutoLiq  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountAutoLiq body: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_auto_liq_create  # noqa: E501

        Creates a new entity of UserAccountAutoLiq  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountAutoLiq body: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_auto_liq_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountAutoLiq',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_dependents(self, masterid, **kwargs):  # noqa: E501
        """user_account_auto_liq_dependents  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """user_account_auto_liq_dependents  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `user_account_auto_liq_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountAutoLiq]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_item(self, id, **kwargs):  # noqa: E501
        """user_account_auto_liq_item  # noqa: E501

        Retrieves an entity of UserAccountAutoLiq type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """user_account_auto_liq_item  # noqa: E501

        Retrieves an entity of UserAccountAutoLiq type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_account_auto_liq_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountAutoLiq',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_items(self, ids, **kwargs):  # noqa: E501
        """user_account_auto_liq_items  # noqa: E501

        Retrieves multiple entities of UserAccountAutoLiq type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """user_account_auto_liq_items  # noqa: E501

        Retrieves multiple entities of UserAccountAutoLiq type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `user_account_auto_liq_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountAutoLiq]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """user_account_auto_liq_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """user_account_auto_liq_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `user_account_auto_liq_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountAutoLiq]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_list(self, **kwargs):  # noqa: E501
        """user_account_auto_liq_list  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_list_with_http_info(self, **kwargs):  # noqa: E501
        """user_account_auto_liq_list  # noqa: E501

        Retrieves all entities of UserAccountAutoLiq type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[UserAccountAutoLiq]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountAutoLiq]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_auto_liq_update(self, body, **kwargs):  # noqa: E501
        """user_account_auto_liq_update  # noqa: E501

        Updates an existing entity of UserAccountAutoLiq  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountAutoLiq body: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_auto_liq_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_auto_liq_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_auto_liq_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_auto_liq_update  # noqa: E501

        Updates an existing entity of UserAccountAutoLiq  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_auto_liq_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountAutoLiq body: (required)
        :return: UserAccountAutoLiq
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_auto_liq_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_auto_liq_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountAutoLiq/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountAutoLiq',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_create(self, body, **kwargs):  # noqa: E501
        """user_account_position_limit_create  # noqa: E501

        Creates a new entity of UserAccountPositionLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountPositionLimit body: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_position_limit_create  # noqa: E501

        Creates a new entity of UserAccountPositionLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountPositionLimit body: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_position_limit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountPositionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_dependents(self, masterid, **kwargs):  # noqa: E501
        """user_account_position_limit_dependents  # noqa: E501

        Retrieves all entities of UserAccountPositionLimit type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """user_account_position_limit_dependents  # noqa: E501

        Retrieves all entities of UserAccountPositionLimit type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `user_account_position_limit_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountPositionLimit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_item(self, id, **kwargs):  # noqa: E501
        """user_account_position_limit_item  # noqa: E501

        Retrieves an entity of UserAccountPositionLimit type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """user_account_position_limit_item  # noqa: E501

        Retrieves an entity of UserAccountPositionLimit type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_account_position_limit_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountPositionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_items(self, ids, **kwargs):  # noqa: E501
        """user_account_position_limit_items  # noqa: E501

        Retrieves multiple entities of UserAccountPositionLimit type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """user_account_position_limit_items  # noqa: E501

        Retrieves multiple entities of UserAccountPositionLimit type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `user_account_position_limit_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountPositionLimit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """user_account_position_limit_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """user_account_position_limit_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[UserAccountPositionLimit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `user_account_position_limit_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountPositionLimit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_position_limit_update(self, body, **kwargs):  # noqa: E501
        """user_account_position_limit_update  # noqa: E501

        Updates an existing entity of UserAccountPositionLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountPositionLimit body: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_position_limit_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_position_limit_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_position_limit_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_position_limit_update  # noqa: E501

        Updates an existing entity of UserAccountPositionLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_position_limit_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountPositionLimit body: (required)
        :return: UserAccountPositionLimit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_position_limit_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_position_limit_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountPositionLimit/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountPositionLimit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_create(self, body, **kwargs):  # noqa: E501
        """user_account_risk_parameter_create  # noqa: E501

        Creates a new entity of UserAccountRiskParameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountRiskParameter body: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_risk_parameter_create  # noqa: E501

        Creates a new entity of UserAccountRiskParameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountRiskParameter body: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_risk_parameter_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountRiskParameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_dependents(self, masterid, **kwargs):  # noqa: E501
        """user_account_risk_parameter_dependents  # noqa: E501

        Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of UserAccountPositionLimit entity (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """user_account_risk_parameter_dependents  # noqa: E501

        Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of UserAccountPositionLimit entity (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `user_account_risk_parameter_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountRiskParameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_item(self, id, **kwargs):  # noqa: E501
        """user_account_risk_parameter_item  # noqa: E501

        Retrieves an entity of UserAccountRiskParameter type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """user_account_risk_parameter_item  # noqa: E501

        Retrieves an entity of UserAccountRiskParameter type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_account_risk_parameter_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountRiskParameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_items(self, ids, **kwargs):  # noqa: E501
        """user_account_risk_parameter_items  # noqa: E501

        Retrieves multiple entities of UserAccountRiskParameter type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """user_account_risk_parameter_items  # noqa: E501

        Retrieves multiple entities of UserAccountRiskParameter type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `user_account_risk_parameter_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountRiskParameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """user_account_risk_parameter_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of UserAccountPositionLimit entities (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """user_account_risk_parameter_l_dependents  # noqa: E501

        Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of UserAccountPositionLimit entities (required)
        :return: list[UserAccountRiskParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `user_account_risk_parameter_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserAccountRiskParameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_account_risk_parameter_update(self, body, **kwargs):  # noqa: E501
        """user_account_risk_parameter_update  # noqa: E501

        Updates an existing entity of UserAccountRiskParameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountRiskParameter body: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_account_risk_parameter_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_account_risk_parameter_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_account_risk_parameter_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_account_risk_parameter_update  # noqa: E501

        Updates an existing entity of UserAccountRiskParameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_account_risk_parameter_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAccountRiskParameter body: (required)
        :return: UserAccountRiskParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_account_risk_parameter_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_account_risk_parameter_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/userAccountRiskParameter/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAccountRiskParameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
