# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'timestamp': 'datetime',
        'email': 'str',
        'status': 'str',
        'professional': 'bool',
        'organization_id': 'int',
        'linked_user_id': 'int',
        'foreign_introducing_broker_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'timestamp': 'timestamp',
        'email': 'email',
        'status': 'status',
        'professional': 'professional',
        'organization_id': 'organizationId',
        'linked_user_id': 'linkedUserId',
        'foreign_introducing_broker_id': 'foreignIntroducingBrokerId'
    }

    def __init__(self, id=None, name=None, timestamp=None, email=None, status=None, professional=None, organization_id=None, linked_user_id=None, foreign_introducing_broker_id=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._timestamp = None
        self._email = None
        self._status = None
        self._professional = None
        self._organization_id = None
        self._linked_user_id = None
        self._foreign_introducing_broker_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.timestamp = timestamp
        self.email = email
        self.status = status
        self.professional = professional
        if organization_id is not None:
            self.organization_id = organization_id
        if linked_user_id is not None:
            self.linked_user_id = linked_user_id
        if foreign_introducing_broker_id is not None:
            self.foreign_introducing_broker_id = foreign_introducing_broker_id

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this User.  # noqa: E501


        :return: The timestamp of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this User.


        :param timestamp: The timestamp of this User.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail  # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail  # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Active", "Closed", "Initiated", "TemporaryLocked", "UnconfirmedEmail"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def professional(self):
        """Gets the professional of this User.  # noqa: E501


        :return: The professional of this User.  # noqa: E501
        :rtype: bool
        """
        return self._professional

    @professional.setter
    def professional(self, professional):
        """Sets the professional of this User.


        :param professional: The professional of this User.  # noqa: E501
        :type: bool
        """
        if professional is None:
            raise ValueError("Invalid value for `professional`, must not be `None`")  # noqa: E501

        self._professional = professional

    @property
    def organization_id(self):
        """Gets the organization_id of this User.  # noqa: E501


        :return: The organization_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this User.


        :param organization_id: The organization_id of this User.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def linked_user_id(self):
        """Gets the linked_user_id of this User.  # noqa: E501

        Linked Live  # noqa: E501

        :return: The linked_user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._linked_user_id

    @linked_user_id.setter
    def linked_user_id(self, linked_user_id):
        """Sets the linked_user_id of this User.

        Linked Live  # noqa: E501

        :param linked_user_id: The linked_user_id of this User.  # noqa: E501
        :type: int
        """

        self._linked_user_id = linked_user_id

    @property
    def foreign_introducing_broker_id(self):
        """Gets the foreign_introducing_broker_id of this User.  # noqa: E501


        :return: The foreign_introducing_broker_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._foreign_introducing_broker_id

    @foreign_introducing_broker_id.setter
    def foreign_introducing_broker_id(self, foreign_introducing_broker_id):
        """Sets the foreign_introducing_broker_id of this User.


        :param foreign_introducing_broker_id: The foreign_introducing_broker_id of this User.  # noqa: E501
        :type: int
        """

        self._foreign_introducing_broker_id = foreign_introducing_broker_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
