# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAccountAutoLiq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'changes_locked': 'bool',
        'margin_percentage_alert': 'float',
        'daily_loss_percentage_alert': 'float',
        'daily_loss_alert': 'float',
        'margin_percentage_liq_only': 'float',
        'daily_loss_percentage_liq_only': 'float',
        'daily_loss_liq_only': 'float',
        'margin_percentage_auto_liq': 'float',
        'daily_loss_percentage_auto_liq': 'float',
        'daily_loss_auto_liq': 'float',
        'weekly_loss_auto_liq': 'float',
        'flatten_timestamp': 'datetime',
        'trailing_max_drawdown': 'float',
        'trailing_max_drawdown_limit': 'float',
        'trailing_max_drawdown_mode': 'str',
        'daily_profit_auto_liq': 'float',
        'weekly_profit_auto_liq': 'float',
        'do_not_unlock': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'changes_locked': 'changesLocked',
        'margin_percentage_alert': 'marginPercentageAlert',
        'daily_loss_percentage_alert': 'dailyLossPercentageAlert',
        'daily_loss_alert': 'dailyLossAlert',
        'margin_percentage_liq_only': 'marginPercentageLiqOnly',
        'daily_loss_percentage_liq_only': 'dailyLossPercentageLiqOnly',
        'daily_loss_liq_only': 'dailyLossLiqOnly',
        'margin_percentage_auto_liq': 'marginPercentageAutoLiq',
        'daily_loss_percentage_auto_liq': 'dailyLossPercentageAutoLiq',
        'daily_loss_auto_liq': 'dailyLossAutoLiq',
        'weekly_loss_auto_liq': 'weeklyLossAutoLiq',
        'flatten_timestamp': 'flattenTimestamp',
        'trailing_max_drawdown': 'trailingMaxDrawdown',
        'trailing_max_drawdown_limit': 'trailingMaxDrawdownLimit',
        'trailing_max_drawdown_mode': 'trailingMaxDrawdownMode',
        'daily_profit_auto_liq': 'dailyProfitAutoLiq',
        'weekly_profit_auto_liq': 'weeklyProfitAutoLiq',
        'do_not_unlock': 'doNotUnlock'
    }

    def __init__(self, id=None, changes_locked=None, margin_percentage_alert=None, daily_loss_percentage_alert=None, daily_loss_alert=None, margin_percentage_liq_only=None, daily_loss_percentage_liq_only=None, daily_loss_liq_only=None, margin_percentage_auto_liq=None, daily_loss_percentage_auto_liq=None, daily_loss_auto_liq=None, weekly_loss_auto_liq=None, flatten_timestamp=None, trailing_max_drawdown=None, trailing_max_drawdown_limit=None, trailing_max_drawdown_mode=None, daily_profit_auto_liq=None, weekly_profit_auto_liq=None, do_not_unlock=None):  # noqa: E501
        """UserAccountAutoLiq - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._changes_locked = None
        self._margin_percentage_alert = None
        self._daily_loss_percentage_alert = None
        self._daily_loss_alert = None
        self._margin_percentage_liq_only = None
        self._daily_loss_percentage_liq_only = None
        self._daily_loss_liq_only = None
        self._margin_percentage_auto_liq = None
        self._daily_loss_percentage_auto_liq = None
        self._daily_loss_auto_liq = None
        self._weekly_loss_auto_liq = None
        self._flatten_timestamp = None
        self._trailing_max_drawdown = None
        self._trailing_max_drawdown_limit = None
        self._trailing_max_drawdown_mode = None
        self._daily_profit_auto_liq = None
        self._weekly_profit_auto_liq = None
        self._do_not_unlock = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if changes_locked is not None:
            self.changes_locked = changes_locked
        if margin_percentage_alert is not None:
            self.margin_percentage_alert = margin_percentage_alert
        if daily_loss_percentage_alert is not None:
            self.daily_loss_percentage_alert = daily_loss_percentage_alert
        if daily_loss_alert is not None:
            self.daily_loss_alert = daily_loss_alert
        if margin_percentage_liq_only is not None:
            self.margin_percentage_liq_only = margin_percentage_liq_only
        if daily_loss_percentage_liq_only is not None:
            self.daily_loss_percentage_liq_only = daily_loss_percentage_liq_only
        if daily_loss_liq_only is not None:
            self.daily_loss_liq_only = daily_loss_liq_only
        if margin_percentage_auto_liq is not None:
            self.margin_percentage_auto_liq = margin_percentage_auto_liq
        if daily_loss_percentage_auto_liq is not None:
            self.daily_loss_percentage_auto_liq = daily_loss_percentage_auto_liq
        if daily_loss_auto_liq is not None:
            self.daily_loss_auto_liq = daily_loss_auto_liq
        if weekly_loss_auto_liq is not None:
            self.weekly_loss_auto_liq = weekly_loss_auto_liq
        if flatten_timestamp is not None:
            self.flatten_timestamp = flatten_timestamp
        if trailing_max_drawdown is not None:
            self.trailing_max_drawdown = trailing_max_drawdown
        if trailing_max_drawdown_limit is not None:
            self.trailing_max_drawdown_limit = trailing_max_drawdown_limit
        if trailing_max_drawdown_mode is not None:
            self.trailing_max_drawdown_mode = trailing_max_drawdown_mode
        if daily_profit_auto_liq is not None:
            self.daily_profit_auto_liq = daily_profit_auto_liq
        if weekly_profit_auto_liq is not None:
            self.weekly_profit_auto_liq = weekly_profit_auto_liq
        if do_not_unlock is not None:
            self.do_not_unlock = do_not_unlock

    @property
    def id(self):
        """Gets the id of this UserAccountAutoLiq.  # noqa: E501


        :return: The id of this UserAccountAutoLiq.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAccountAutoLiq.


        :param id: The id of this UserAccountAutoLiq.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def changes_locked(self):
        """Gets the changes_locked of this UserAccountAutoLiq.  # noqa: E501

        Changes Locked  # noqa: E501

        :return: The changes_locked of this UserAccountAutoLiq.  # noqa: E501
        :rtype: bool
        """
        return self._changes_locked

    @changes_locked.setter
    def changes_locked(self, changes_locked):
        """Sets the changes_locked of this UserAccountAutoLiq.

        Changes Locked  # noqa: E501

        :param changes_locked: The changes_locked of this UserAccountAutoLiq.  # noqa: E501
        :type: bool
        """

        self._changes_locked = changes_locked

    @property
    def margin_percentage_alert(self):
        """Gets the margin_percentage_alert of this UserAccountAutoLiq.  # noqa: E501

        Margin % for an Alert  # noqa: E501

        :return: The margin_percentage_alert of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._margin_percentage_alert

    @margin_percentage_alert.setter
    def margin_percentage_alert(self, margin_percentage_alert):
        """Sets the margin_percentage_alert of this UserAccountAutoLiq.

        Margin % for an Alert  # noqa: E501

        :param margin_percentage_alert: The margin_percentage_alert of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._margin_percentage_alert = margin_percentage_alert

    @property
    def daily_loss_percentage_alert(self):
        """Gets the daily_loss_percentage_alert of this UserAccountAutoLiq.  # noqa: E501

        Daily Loss % for an Alert  # noqa: E501

        :return: The daily_loss_percentage_alert of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_percentage_alert

    @daily_loss_percentage_alert.setter
    def daily_loss_percentage_alert(self, daily_loss_percentage_alert):
        """Sets the daily_loss_percentage_alert of this UserAccountAutoLiq.

        Daily Loss % for an Alert  # noqa: E501

        :param daily_loss_percentage_alert: The daily_loss_percentage_alert of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_percentage_alert = daily_loss_percentage_alert

    @property
    def daily_loss_alert(self):
        """Gets the daily_loss_alert of this UserAccountAutoLiq.  # noqa: E501

        $ Daily Loss for an Alert  # noqa: E501

        :return: The daily_loss_alert of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_alert

    @daily_loss_alert.setter
    def daily_loss_alert(self, daily_loss_alert):
        """Sets the daily_loss_alert of this UserAccountAutoLiq.

        $ Daily Loss for an Alert  # noqa: E501

        :param daily_loss_alert: The daily_loss_alert of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_alert = daily_loss_alert

    @property
    def margin_percentage_liq_only(self):
        """Gets the margin_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501

        Margin % for an Liq Only  # noqa: E501

        :return: The margin_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._margin_percentage_liq_only

    @margin_percentage_liq_only.setter
    def margin_percentage_liq_only(self, margin_percentage_liq_only):
        """Sets the margin_percentage_liq_only of this UserAccountAutoLiq.

        Margin % for an Liq Only  # noqa: E501

        :param margin_percentage_liq_only: The margin_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._margin_percentage_liq_only = margin_percentage_liq_only

    @property
    def daily_loss_percentage_liq_only(self):
        """Gets the daily_loss_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501

        Daily Loss % for an Liq Only  # noqa: E501

        :return: The daily_loss_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_percentage_liq_only

    @daily_loss_percentage_liq_only.setter
    def daily_loss_percentage_liq_only(self, daily_loss_percentage_liq_only):
        """Sets the daily_loss_percentage_liq_only of this UserAccountAutoLiq.

        Daily Loss % for an Liq Only  # noqa: E501

        :param daily_loss_percentage_liq_only: The daily_loss_percentage_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_percentage_liq_only = daily_loss_percentage_liq_only

    @property
    def daily_loss_liq_only(self):
        """Gets the daily_loss_liq_only of this UserAccountAutoLiq.  # noqa: E501

        $ Daily Loss for an Liq Only  # noqa: E501

        :return: The daily_loss_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_liq_only

    @daily_loss_liq_only.setter
    def daily_loss_liq_only(self, daily_loss_liq_only):
        """Sets the daily_loss_liq_only of this UserAccountAutoLiq.

        $ Daily Loss for an Liq Only  # noqa: E501

        :param daily_loss_liq_only: The daily_loss_liq_only of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_liq_only = daily_loss_liq_only

    @property
    def margin_percentage_auto_liq(self):
        """Gets the margin_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        Margin % for an Auto-Liq  # noqa: E501

        :return: The margin_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._margin_percentage_auto_liq

    @margin_percentage_auto_liq.setter
    def margin_percentage_auto_liq(self, margin_percentage_auto_liq):
        """Sets the margin_percentage_auto_liq of this UserAccountAutoLiq.

        Margin % for an Auto-Liq  # noqa: E501

        :param margin_percentage_auto_liq: The margin_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._margin_percentage_auto_liq = margin_percentage_auto_liq

    @property
    def daily_loss_percentage_auto_liq(self):
        """Gets the daily_loss_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        Daily Loss % for an AutoLiq  # noqa: E501

        :return: The daily_loss_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_percentage_auto_liq

    @daily_loss_percentage_auto_liq.setter
    def daily_loss_percentage_auto_liq(self, daily_loss_percentage_auto_liq):
        """Sets the daily_loss_percentage_auto_liq of this UserAccountAutoLiq.

        Daily Loss % for an AutoLiq  # noqa: E501

        :param daily_loss_percentage_auto_liq: The daily_loss_percentage_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_percentage_auto_liq = daily_loss_percentage_auto_liq

    @property
    def daily_loss_auto_liq(self):
        """Gets the daily_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        $ Daily Loss for an Auto-Liq  # noqa: E501

        :return: The daily_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_loss_auto_liq

    @daily_loss_auto_liq.setter
    def daily_loss_auto_liq(self, daily_loss_auto_liq):
        """Sets the daily_loss_auto_liq of this UserAccountAutoLiq.

        $ Daily Loss for an Auto-Liq  # noqa: E501

        :param daily_loss_auto_liq: The daily_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_loss_auto_liq = daily_loss_auto_liq

    @property
    def weekly_loss_auto_liq(self):
        """Gets the weekly_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        $ Weekly Loss for an Auto-Liq  # noqa: E501

        :return: The weekly_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._weekly_loss_auto_liq

    @weekly_loss_auto_liq.setter
    def weekly_loss_auto_liq(self, weekly_loss_auto_liq):
        """Sets the weekly_loss_auto_liq of this UserAccountAutoLiq.

        $ Weekly Loss for an Auto-Liq  # noqa: E501

        :param weekly_loss_auto_liq: The weekly_loss_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._weekly_loss_auto_liq = weekly_loss_auto_liq

    @property
    def flatten_timestamp(self):
        """Gets the flatten_timestamp of this UserAccountAutoLiq.  # noqa: E501

        Flatten &amp; Cancel  # noqa: E501

        :return: The flatten_timestamp of this UserAccountAutoLiq.  # noqa: E501
        :rtype: datetime
        """
        return self._flatten_timestamp

    @flatten_timestamp.setter
    def flatten_timestamp(self, flatten_timestamp):
        """Sets the flatten_timestamp of this UserAccountAutoLiq.

        Flatten &amp; Cancel  # noqa: E501

        :param flatten_timestamp: The flatten_timestamp of this UserAccountAutoLiq.  # noqa: E501
        :type: datetime
        """

        self._flatten_timestamp = flatten_timestamp

    @property
    def trailing_max_drawdown(self):
        """Gets the trailing_max_drawdown of this UserAccountAutoLiq.  # noqa: E501

        $ Trailing Max Drawdown  # noqa: E501

        :return: The trailing_max_drawdown of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._trailing_max_drawdown

    @trailing_max_drawdown.setter
    def trailing_max_drawdown(self, trailing_max_drawdown):
        """Sets the trailing_max_drawdown of this UserAccountAutoLiq.

        $ Trailing Max Drawdown  # noqa: E501

        :param trailing_max_drawdown: The trailing_max_drawdown of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._trailing_max_drawdown = trailing_max_drawdown

    @property
    def trailing_max_drawdown_limit(self):
        """Gets the trailing_max_drawdown_limit of this UserAccountAutoLiq.  # noqa: E501

        $ Trailing Max Drawdown Limit  # noqa: E501

        :return: The trailing_max_drawdown_limit of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._trailing_max_drawdown_limit

    @trailing_max_drawdown_limit.setter
    def trailing_max_drawdown_limit(self, trailing_max_drawdown_limit):
        """Sets the trailing_max_drawdown_limit of this UserAccountAutoLiq.

        $ Trailing Max Drawdown Limit  # noqa: E501

        :param trailing_max_drawdown_limit: The trailing_max_drawdown_limit of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._trailing_max_drawdown_limit = trailing_max_drawdown_limit

    @property
    def trailing_max_drawdown_mode(self):
        """Gets the trailing_max_drawdown_mode of this UserAccountAutoLiq.  # noqa: E501

        EOD, RealTime  # noqa: E501

        :return: The trailing_max_drawdown_mode of this UserAccountAutoLiq.  # noqa: E501
        :rtype: str
        """
        return self._trailing_max_drawdown_mode

    @trailing_max_drawdown_mode.setter
    def trailing_max_drawdown_mode(self, trailing_max_drawdown_mode):
        """Sets the trailing_max_drawdown_mode of this UserAccountAutoLiq.

        EOD, RealTime  # noqa: E501

        :param trailing_max_drawdown_mode: The trailing_max_drawdown_mode of this UserAccountAutoLiq.  # noqa: E501
        :type: str
        """
        allowed_values = ["EOD", "RealTime"]  # noqa: E501
        if trailing_max_drawdown_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `trailing_max_drawdown_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(trailing_max_drawdown_mode, allowed_values)
            )

        self._trailing_max_drawdown_mode = trailing_max_drawdown_mode

    @property
    def daily_profit_auto_liq(self):
        """Gets the daily_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        $ Daily Profit for an Auto-Liq  # noqa: E501

        :return: The daily_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._daily_profit_auto_liq

    @daily_profit_auto_liq.setter
    def daily_profit_auto_liq(self, daily_profit_auto_liq):
        """Sets the daily_profit_auto_liq of this UserAccountAutoLiq.

        $ Daily Profit for an Auto-Liq  # noqa: E501

        :param daily_profit_auto_liq: The daily_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._daily_profit_auto_liq = daily_profit_auto_liq

    @property
    def weekly_profit_auto_liq(self):
        """Gets the weekly_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501

        $ Weekly Profit for an Auto-Liq  # noqa: E501

        :return: The weekly_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :rtype: float
        """
        return self._weekly_profit_auto_liq

    @weekly_profit_auto_liq.setter
    def weekly_profit_auto_liq(self, weekly_profit_auto_liq):
        """Sets the weekly_profit_auto_liq of this UserAccountAutoLiq.

        $ Weekly Profit for an Auto-Liq  # noqa: E501

        :param weekly_profit_auto_liq: The weekly_profit_auto_liq of this UserAccountAutoLiq.  # noqa: E501
        :type: float
        """

        self._weekly_profit_auto_liq = weekly_profit_auto_liq

    @property
    def do_not_unlock(self):
        """Gets the do_not_unlock of this UserAccountAutoLiq.  # noqa: E501

        Do not automatically unlock account if triggered  # noqa: E501

        :return: The do_not_unlock of this UserAccountAutoLiq.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_unlock

    @do_not_unlock.setter
    def do_not_unlock(self, do_not_unlock):
        """Sets the do_not_unlock of this UserAccountAutoLiq.

        Do not automatically unlock account if triggered  # noqa: E501

        :param do_not_unlock: The do_not_unlock of this UserAccountAutoLiq.  # noqa: E501
        :type: bool
        """

        self._do_not_unlock = do_not_unlock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAccountAutoLiq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAccountAutoLiq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
