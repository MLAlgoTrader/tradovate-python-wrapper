# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestTradingPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'cta_contact': 'str',
        'cta_email': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'cta_contact': 'ctaContact',
        'cta_email': 'ctaEmail'
    }

    def __init__(self, account_id=None, cta_contact=None, cta_email=None):  # noqa: E501
        """RequestTradingPermission - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._cta_contact = None
        self._cta_email = None
        self.discriminator = None
        self.account_id = account_id
        self.cta_contact = cta_contact
        self.cta_email = cta_email

    @property
    def account_id(self):
        """Gets the account_id of this RequestTradingPermission.  # noqa: E501


        :return: The account_id of this RequestTradingPermission.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RequestTradingPermission.


        :param account_id: The account_id of this RequestTradingPermission.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def cta_contact(self):
        """Gets the cta_contact of this RequestTradingPermission.  # noqa: E501


        :return: The cta_contact of this RequestTradingPermission.  # noqa: E501
        :rtype: str
        """
        return self._cta_contact

    @cta_contact.setter
    def cta_contact(self, cta_contact):
        """Sets the cta_contact of this RequestTradingPermission.


        :param cta_contact: The cta_contact of this RequestTradingPermission.  # noqa: E501
        :type: str
        """
        if cta_contact is None:
            raise ValueError("Invalid value for `cta_contact`, must not be `None`")  # noqa: E501

        self._cta_contact = cta_contact

    @property
    def cta_email(self):
        """Gets the cta_email of this RequestTradingPermission.  # noqa: E501


        :return: The cta_email of this RequestTradingPermission.  # noqa: E501
        :rtype: str
        """
        return self._cta_email

    @cta_email.setter
    def cta_email(self, cta_email):
        """Sets the cta_email of this RequestTradingPermission.


        :param cta_email: The cta_email of this RequestTradingPermission.  # noqa: E501
        :type: str
        """
        if cta_email is None:
            raise ValueError("Invalid value for `cta_email`, must not be `None`")  # noqa: E501

        self._cta_email = cta_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestTradingPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestTradingPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
