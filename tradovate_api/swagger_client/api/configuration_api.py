# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def admin_alert_find(self, name, **kwargs):  # noqa: E501
        """admin_alert_find  # noqa: E501

        Retrieves an entity of AdminAlert type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: AdminAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_alert_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_alert_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def admin_alert_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """admin_alert_find  # noqa: E501

        Retrieves an entity of AdminAlert type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: AdminAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_alert_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `admin_alert_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/adminAlert/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAlert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_alert_item(self, id, **kwargs):  # noqa: E501
        """admin_alert_item  # noqa: E501

        Retrieves an entity of AdminAlert type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AdminAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_alert_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_alert_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def admin_alert_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """admin_alert_item  # noqa: E501

        Retrieves an entity of AdminAlert type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AdminAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_alert_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `admin_alert_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/adminAlert/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAlert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_alert_items(self, ids, **kwargs):  # noqa: E501
        """admin_alert_items  # noqa: E501

        Retrieves multiple entities of AdminAlert type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_alert_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_alert_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def admin_alert_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """admin_alert_items  # noqa: E501

        Retrieves multiple entities of AdminAlert type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_alert_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `admin_alert_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/adminAlert/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdminAlert]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_alert_list(self, **kwargs):  # noqa: E501
        """admin_alert_list  # noqa: E501

        Retrieves all entities of AdminAlert type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_alert_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.admin_alert_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def admin_alert_list_with_http_info(self, **kwargs):  # noqa: E501
        """admin_alert_list  # noqa: E501

        Retrieves all entities of AdminAlert type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_alert_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/adminAlert/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdminAlert]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_alert_suggest(self, t, l, **kwargs):  # noqa: E501
        """admin_alert_suggest  # noqa: E501

        Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_alert_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_alert_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def admin_alert_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """admin_alert_suggest  # noqa: E501

        Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_alert_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[AdminAlert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_alert_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `admin_alert_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `admin_alert_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/adminAlert/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdminAlert]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clearing_house_find(self, name, **kwargs):  # noqa: E501
        """clearing_house_find  # noqa: E501

        Retrieves an entity of ClearingHouse type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ClearingHouse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clearing_house_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.clearing_house_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def clearing_house_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """clearing_house_find  # noqa: E501

        Retrieves an entity of ClearingHouse type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ClearingHouse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clearing_house_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `clearing_house_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/clearingHouse/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClearingHouse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clearing_house_item(self, id, **kwargs):  # noqa: E501
        """clearing_house_item  # noqa: E501

        Retrieves an entity of ClearingHouse type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ClearingHouse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clearing_house_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clearing_house_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clearing_house_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """clearing_house_item  # noqa: E501

        Retrieves an entity of ClearingHouse type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ClearingHouse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clearing_house_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clearing_house_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/clearingHouse/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClearingHouse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clearing_house_items(self, ids, **kwargs):  # noqa: E501
        """clearing_house_items  # noqa: E501

        Retrieves multiple entities of ClearingHouse type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clearing_house_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.clearing_house_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def clearing_house_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """clearing_house_items  # noqa: E501

        Retrieves multiple entities of ClearingHouse type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clearing_house_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `clearing_house_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/clearingHouse/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClearingHouse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clearing_house_list(self, **kwargs):  # noqa: E501
        """clearing_house_list  # noqa: E501

        Retrieves all entities of ClearingHouse type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clearing_house_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clearing_house_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def clearing_house_list_with_http_info(self, **kwargs):  # noqa: E501
        """clearing_house_list  # noqa: E501

        Retrieves all entities of ClearingHouse type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clearing_house_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/clearingHouse/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClearingHouse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clearing_house_suggest(self, t, l, **kwargs):  # noqa: E501
        """clearing_house_suggest  # noqa: E501

        Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clearing_house_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.clearing_house_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def clearing_house_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """clearing_house_suggest  # noqa: E501

        Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clearing_house_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ClearingHouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clearing_house_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `clearing_house_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `clearing_house_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/clearingHouse/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClearingHouse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entitlement_item(self, id, **kwargs):  # noqa: E501
        """entitlement_item  # noqa: E501

        Retrieves an entity of Entitlement type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Entitlement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entitlement_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.entitlement_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def entitlement_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """entitlement_item  # noqa: E501

        Retrieves an entity of Entitlement type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Entitlement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entitlement_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `entitlement_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/entitlement/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entitlement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entitlement_items(self, ids, **kwargs):  # noqa: E501
        """entitlement_items  # noqa: E501

        Retrieves multiple entities of Entitlement type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Entitlement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entitlement_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.entitlement_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def entitlement_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """entitlement_items  # noqa: E501

        Retrieves multiple entities of Entitlement type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Entitlement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entitlement_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `entitlement_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/entitlement/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entitlement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entitlement_list(self, **kwargs):  # noqa: E501
        """entitlement_list  # noqa: E501

        Retrieves all entities of Entitlement type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Entitlement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entitlement_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.entitlement_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def entitlement_list_with_http_info(self, **kwargs):  # noqa: E501
        """entitlement_list  # noqa: E501

        Retrieves all entities of Entitlement type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entitlement_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Entitlement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entitlement_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/entitlement/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entitlement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_strategy_type_find(self, name, **kwargs):  # noqa: E501
        """order_strategy_type_find  # noqa: E501

        Retrieves an entity of OrderStrategyType type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: OrderStrategyType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_strategy_type_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.order_strategy_type_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def order_strategy_type_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """order_strategy_type_find  # noqa: E501

        Retrieves an entity of OrderStrategyType type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: OrderStrategyType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_strategy_type_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `order_strategy_type_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/orderStrategyType/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderStrategyType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_strategy_type_item(self, id, **kwargs):  # noqa: E501
        """order_strategy_type_item  # noqa: E501

        Retrieves an entity of OrderStrategyType type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: OrderStrategyType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_strategy_type_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.order_strategy_type_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def order_strategy_type_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """order_strategy_type_item  # noqa: E501

        Retrieves an entity of OrderStrategyType type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: OrderStrategyType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_strategy_type_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `order_strategy_type_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/orderStrategyType/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderStrategyType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_strategy_type_items(self, ids, **kwargs):  # noqa: E501
        """order_strategy_type_items  # noqa: E501

        Retrieves multiple entities of OrderStrategyType type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_strategy_type_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.order_strategy_type_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def order_strategy_type_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """order_strategy_type_items  # noqa: E501

        Retrieves multiple entities of OrderStrategyType type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_strategy_type_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `order_strategy_type_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/orderStrategyType/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderStrategyType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_strategy_type_list(self, **kwargs):  # noqa: E501
        """order_strategy_type_list  # noqa: E501

        Retrieves all entities of OrderStrategyType type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_strategy_type_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_strategy_type_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_strategy_type_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_strategy_type_list  # noqa: E501

        Retrieves all entities of OrderStrategyType type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_strategy_type_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/orderStrategyType/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderStrategyType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_strategy_type_suggest(self, t, l, **kwargs):  # noqa: E501
        """order_strategy_type_suggest  # noqa: E501

        Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_strategy_type_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.order_strategy_type_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def order_strategy_type_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """order_strategy_type_suggest  # noqa: E501

        Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_strategy_type_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[OrderStrategyType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_strategy_type_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `order_strategy_type_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `order_strategy_type_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/orderStrategyType/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderStrategyType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def property_find(self, name, **kwargs):  # noqa: E501
        """property_find  # noqa: E501

        Retrieves an entity of Property type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.property_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def property_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """property_find  # noqa: E501

        Retrieves an entity of Property type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `property_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/property/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def property_item(self, id, **kwargs):  # noqa: E501
        """property_item  # noqa: E501

        Retrieves an entity of Property type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.property_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def property_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """property_item  # noqa: E501

        Retrieves an entity of Property type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `property_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/property/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def property_items(self, ids, **kwargs):  # noqa: E501
        """property_items  # noqa: E501

        Retrieves multiple entities of Property type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.property_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def property_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """property_items  # noqa: E501

        Retrieves multiple entities of Property type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `property_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/property/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def property_list(self, **kwargs):  # noqa: E501
        """property_list  # noqa: E501

        Retrieves all entities of Property type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.property_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def property_list_with_http_info(self, **kwargs):  # noqa: E501
        """property_list  # noqa: E501

        Retrieves all entities of Property type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/property/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def property_suggest(self, t, l, **kwargs):  # noqa: E501
        """property_suggest  # noqa: E501

        Retrieves entities of Property type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.property_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def property_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """property_suggest  # noqa: E501

        Retrieves entities of Property type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `property_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `property_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/property/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
