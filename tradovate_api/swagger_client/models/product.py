# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'currency_id': 'int',
        'product_type': 'str',
        'description': 'str',
        'exchange_id': 'int',
        'contract_group_id': 'int',
        'risk_discount_contract_group_id': 'int',
        'status': 'str',
        'months': 'str',
        'is_secured': 'bool',
        'value_per_point': 'float',
        'price_format_type': 'str',
        'price_format': 'int',
        'tick_size': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'currency_id': 'currencyId',
        'product_type': 'productType',
        'description': 'description',
        'exchange_id': 'exchangeId',
        'contract_group_id': 'contractGroupId',
        'risk_discount_contract_group_id': 'riskDiscountContractGroupId',
        'status': 'status',
        'months': 'months',
        'is_secured': 'isSecured',
        'value_per_point': 'valuePerPoint',
        'price_format_type': 'priceFormatType',
        'price_format': 'priceFormat',
        'tick_size': 'tickSize'
    }

    def __init__(self, id=None, name=None, currency_id=None, product_type=None, description=None, exchange_id=None, contract_group_id=None, risk_discount_contract_group_id=None, status=None, months=None, is_secured=None, value_per_point=None, price_format_type=None, price_format=None, tick_size=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._currency_id = None
        self._product_type = None
        self._description = None
        self._exchange_id = None
        self._contract_group_id = None
        self._risk_discount_contract_group_id = None
        self._status = None
        self._months = None
        self._is_secured = None
        self._value_per_point = None
        self._price_format_type = None
        self._price_format = None
        self._tick_size = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.currency_id = currency_id
        self.product_type = product_type
        self.description = description
        self.exchange_id = exchange_id
        self.contract_group_id = contract_group_id
        if risk_discount_contract_group_id is not None:
            self.risk_discount_contract_group_id = risk_discount_contract_group_id
        self.status = status
        if months is not None:
            self.months = months
        if is_secured is not None:
            self.is_secured = is_secured
        self.value_per_point = value_per_point
        self.price_format_type = price_format_type
        self.price_format = price_format
        self.tick_size = tick_size

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency_id(self):
        """Gets the currency_id of this Product.  # noqa: E501


        :return: The currency_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this Product.


        :param currency_id: The currency_id of this Product.  # noqa: E501
        :type: int
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def product_type(self):
        """Gets the product_type of this Product.  # noqa: E501

        CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread  # noqa: E501

        :return: The product_type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Product.

        CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread  # noqa: E501

        :param product_type: The product_type of this Product.  # noqa: E501
        :type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CommonStock", "Continuous", "Cryptocurrency", "Futures", "MarketInternals", "Options", "Spread"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def description(self):
        """Gets the description of this Product.  # noqa: E501


        :return: The description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.


        :param description: The description of this Product.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def exchange_id(self):
        """Gets the exchange_id of this Product.  # noqa: E501


        :return: The exchange_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this Product.


        :param exchange_id: The exchange_id of this Product.  # noqa: E501
        :type: int
        """
        if exchange_id is None:
            raise ValueError("Invalid value for `exchange_id`, must not be `None`")  # noqa: E501

        self._exchange_id = exchange_id

    @property
    def contract_group_id(self):
        """Gets the contract_group_id of this Product.  # noqa: E501


        :return: The contract_group_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._contract_group_id

    @contract_group_id.setter
    def contract_group_id(self, contract_group_id):
        """Sets the contract_group_id of this Product.


        :param contract_group_id: The contract_group_id of this Product.  # noqa: E501
        :type: int
        """
        if contract_group_id is None:
            raise ValueError("Invalid value for `contract_group_id`, must not be `None`")  # noqa: E501

        self._contract_group_id = contract_group_id

    @property
    def risk_discount_contract_group_id(self):
        """Gets the risk_discount_contract_group_id of this Product.  # noqa: E501


        :return: The risk_discount_contract_group_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._risk_discount_contract_group_id

    @risk_discount_contract_group_id.setter
    def risk_discount_contract_group_id(self, risk_discount_contract_group_id):
        """Sets the risk_discount_contract_group_id of this Product.


        :param risk_discount_contract_group_id: The risk_discount_contract_group_id of this Product.  # noqa: E501
        :type: int
        """

        self._risk_discount_contract_group_id = risk_discount_contract_group_id

    @property
    def status(self):
        """Gets the status of this Product.  # noqa: E501

        Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified  # noqa: E501

        :return: The status of this Product.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Product.

        Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified  # noqa: E501

        :param status: The status of this Product.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Inactive", "Locked", "ReadyForContracts", "ReadyToTrade", "Verified"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def months(self):
        """Gets the months of this Product.  # noqa: E501


        :return: The months of this Product.  # noqa: E501
        :rtype: str
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this Product.


        :param months: The months of this Product.  # noqa: E501
        :type: str
        """

        self._months = months

    @property
    def is_secured(self):
        """Gets the is_secured of this Product.  # noqa: E501


        :return: The is_secured of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._is_secured

    @is_secured.setter
    def is_secured(self, is_secured):
        """Sets the is_secured of this Product.


        :param is_secured: The is_secured of this Product.  # noqa: E501
        :type: bool
        """

        self._is_secured = is_secured

    @property
    def value_per_point(self):
        """Gets the value_per_point of this Product.  # noqa: E501


        :return: The value_per_point of this Product.  # noqa: E501
        :rtype: float
        """
        return self._value_per_point

    @value_per_point.setter
    def value_per_point(self, value_per_point):
        """Sets the value_per_point of this Product.


        :param value_per_point: The value_per_point of this Product.  # noqa: E501
        :type: float
        """
        if value_per_point is None:
            raise ValueError("Invalid value for `value_per_point`, must not be `None`")  # noqa: E501

        self._value_per_point = value_per_point

    @property
    def price_format_type(self):
        """Gets the price_format_type of this Product.  # noqa: E501

        Decimal, Fractional  # noqa: E501

        :return: The price_format_type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._price_format_type

    @price_format_type.setter
    def price_format_type(self, price_format_type):
        """Sets the price_format_type of this Product.

        Decimal, Fractional  # noqa: E501

        :param price_format_type: The price_format_type of this Product.  # noqa: E501
        :type: str
        """
        if price_format_type is None:
            raise ValueError("Invalid value for `price_format_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Decimal", "Fractional"]  # noqa: E501
        if price_format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `price_format_type` ({0}), must be one of {1}"  # noqa: E501
                .format(price_format_type, allowed_values)
            )

        self._price_format_type = price_format_type

    @property
    def price_format(self):
        """Gets the price_format of this Product.  # noqa: E501


        :return: The price_format of this Product.  # noqa: E501
        :rtype: int
        """
        return self._price_format

    @price_format.setter
    def price_format(self, price_format):
        """Sets the price_format of this Product.


        :param price_format: The price_format of this Product.  # noqa: E501
        :type: int
        """
        if price_format is None:
            raise ValueError("Invalid value for `price_format`, must not be `None`")  # noqa: E501

        self._price_format = price_format

    @property
    def tick_size(self):
        """Gets the tick_size of this Product.  # noqa: E501

        Product Tick Size  # noqa: E501

        :return: The tick_size of this Product.  # noqa: E501
        :rtype: float
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """Sets the tick_size of this Product.

        Product Tick Size  # noqa: E501

        :param tick_size: The tick_size of this Product.  # noqa: E501
        :type: float
        """
        if tick_size is None:
            raise ValueError("Invalid value for `tick_size`, must not be `None`")  # noqa: E501

        self._tick_size = tick_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
