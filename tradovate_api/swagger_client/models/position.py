# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'contract_id': 'int',
        'timestamp': 'datetime',
        'trade_date': 'TradeDate',
        'net_pos': 'int',
        'net_price': 'float',
        'bought': 'int',
        'bought_value': 'float',
        'sold': 'int',
        'sold_value': 'float',
        'prev_pos': 'int',
        'prev_price': 'float'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'contract_id': 'contractId',
        'timestamp': 'timestamp',
        'trade_date': 'tradeDate',
        'net_pos': 'netPos',
        'net_price': 'netPrice',
        'bought': 'bought',
        'bought_value': 'boughtValue',
        'sold': 'sold',
        'sold_value': 'soldValue',
        'prev_pos': 'prevPos',
        'prev_price': 'prevPrice'
    }

    def __init__(self, id=None, account_id=None, contract_id=None, timestamp=None, trade_date=None, net_pos=None, net_price=None, bought=None, bought_value=None, sold=None, sold_value=None, prev_pos=None, prev_price=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._contract_id = None
        self._timestamp = None
        self._trade_date = None
        self._net_pos = None
        self._net_price = None
        self._bought = None
        self._bought_value = None
        self._sold = None
        self._sold_value = None
        self._prev_pos = None
        self._prev_price = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.account_id = account_id
        self.contract_id = contract_id
        self.timestamp = timestamp
        self.trade_date = trade_date
        self.net_pos = net_pos
        if net_price is not None:
            self.net_price = net_price
        self.bought = bought
        self.bought_value = bought_value
        self.sold = sold
        self.sold_value = sold_value
        self.prev_pos = prev_pos
        if prev_price is not None:
            self.prev_price = prev_price

    @property
    def id(self):
        """Gets the id of this Position.  # noqa: E501


        :return: The id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Position.  # noqa: E501


        :return: The account_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Position.


        :param account_id: The account_id of this Position.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def contract_id(self):
        """Gets the contract_id of this Position.  # noqa: E501


        :return: The contract_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Position.


        :param contract_id: The contract_id of this Position.  # noqa: E501
        :type: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Position.  # noqa: E501


        :return: The timestamp of this Position.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Position.


        :param timestamp: The timestamp of this Position.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def trade_date(self):
        """Gets the trade_date of this Position.  # noqa: E501


        :return: The trade_date of this Position.  # noqa: E501
        :rtype: TradeDate
        """
        return self._trade_date

    @trade_date.setter
    def trade_date(self, trade_date):
        """Sets the trade_date of this Position.


        :param trade_date: The trade_date of this Position.  # noqa: E501
        :type: TradeDate
        """
        if trade_date is None:
            raise ValueError("Invalid value for `trade_date`, must not be `None`")  # noqa: E501

        self._trade_date = trade_date

    @property
    def net_pos(self):
        """Gets the net_pos of this Position.  # noqa: E501


        :return: The net_pos of this Position.  # noqa: E501
        :rtype: int
        """
        return self._net_pos

    @net_pos.setter
    def net_pos(self, net_pos):
        """Sets the net_pos of this Position.


        :param net_pos: The net_pos of this Position.  # noqa: E501
        :type: int
        """
        if net_pos is None:
            raise ValueError("Invalid value for `net_pos`, must not be `None`")  # noqa: E501

        self._net_pos = net_pos

    @property
    def net_price(self):
        """Gets the net_price of this Position.  # noqa: E501


        :return: The net_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._net_price

    @net_price.setter
    def net_price(self, net_price):
        """Sets the net_price of this Position.


        :param net_price: The net_price of this Position.  # noqa: E501
        :type: float
        """

        self._net_price = net_price

    @property
    def bought(self):
        """Gets the bought of this Position.  # noqa: E501


        :return: The bought of this Position.  # noqa: E501
        :rtype: int
        """
        return self._bought

    @bought.setter
    def bought(self, bought):
        """Sets the bought of this Position.


        :param bought: The bought of this Position.  # noqa: E501
        :type: int
        """
        if bought is None:
            raise ValueError("Invalid value for `bought`, must not be `None`")  # noqa: E501

        self._bought = bought

    @property
    def bought_value(self):
        """Gets the bought_value of this Position.  # noqa: E501


        :return: The bought_value of this Position.  # noqa: E501
        :rtype: float
        """
        return self._bought_value

    @bought_value.setter
    def bought_value(self, bought_value):
        """Sets the bought_value of this Position.


        :param bought_value: The bought_value of this Position.  # noqa: E501
        :type: float
        """
        if bought_value is None:
            raise ValueError("Invalid value for `bought_value`, must not be `None`")  # noqa: E501

        self._bought_value = bought_value

    @property
    def sold(self):
        """Gets the sold of this Position.  # noqa: E501


        :return: The sold of this Position.  # noqa: E501
        :rtype: int
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this Position.


        :param sold: The sold of this Position.  # noqa: E501
        :type: int
        """
        if sold is None:
            raise ValueError("Invalid value for `sold`, must not be `None`")  # noqa: E501

        self._sold = sold

    @property
    def sold_value(self):
        """Gets the sold_value of this Position.  # noqa: E501


        :return: The sold_value of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sold_value

    @sold_value.setter
    def sold_value(self, sold_value):
        """Sets the sold_value of this Position.


        :param sold_value: The sold_value of this Position.  # noqa: E501
        :type: float
        """
        if sold_value is None:
            raise ValueError("Invalid value for `sold_value`, must not be `None`")  # noqa: E501

        self._sold_value = sold_value

    @property
    def prev_pos(self):
        """Gets the prev_pos of this Position.  # noqa: E501


        :return: The prev_pos of this Position.  # noqa: E501
        :rtype: int
        """
        return self._prev_pos

    @prev_pos.setter
    def prev_pos(self, prev_pos):
        """Sets the prev_pos of this Position.


        :param prev_pos: The prev_pos of this Position.  # noqa: E501
        :type: int
        """
        if prev_pos is None:
            raise ValueError("Invalid value for `prev_pos`, must not be `None`")  # noqa: E501

        self._prev_pos = prev_pos

    @property
    def prev_price(self):
        """Gets the prev_price of this Position.  # noqa: E501


        :return: The prev_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._prev_price

    @prev_price.setter
    def prev_price(self, prev_price):
        """Sets the prev_price of this Position.


        :param prev_price: The prev_price of this Position.  # noqa: E501
        :type: float
        """

        self._prev_price = prev_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
