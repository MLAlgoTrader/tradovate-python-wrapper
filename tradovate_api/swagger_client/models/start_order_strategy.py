# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StartOrderStrategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'account_spec': 'str',
        'symbol': 'str',
        'order_strategy_type_id': 'int',
        'action': 'str',
        'params': 'str',
        'uuid': 'str',
        'custom_tag50': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_spec': 'accountSpec',
        'symbol': 'symbol',
        'order_strategy_type_id': 'orderStrategyTypeId',
        'action': 'action',
        'params': 'params',
        'uuid': 'uuid',
        'custom_tag50': 'customTag50'
    }

    def __init__(self, account_id=None, account_spec=None, symbol=None, order_strategy_type_id=None, action=None, params=None, uuid=None, custom_tag50=None):  # noqa: E501
        """StartOrderStrategy - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_spec = None
        self._symbol = None
        self._order_strategy_type_id = None
        self._action = None
        self._params = None
        self._uuid = None
        self._custom_tag50 = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_spec is not None:
            self.account_spec = account_spec
        self.symbol = symbol
        self.order_strategy_type_id = order_strategy_type_id
        self.action = action
        if params is not None:
            self.params = params
        if uuid is not None:
            self.uuid = uuid
        if custom_tag50 is not None:
            self.custom_tag50 = custom_tag50

    @property
    def account_id(self):
        """Gets the account_id of this StartOrderStrategy.  # noqa: E501


        :return: The account_id of this StartOrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this StartOrderStrategy.


        :param account_id: The account_id of this StartOrderStrategy.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_spec(self):
        """Gets the account_spec of this StartOrderStrategy.  # noqa: E501


        :return: The account_spec of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._account_spec

    @account_spec.setter
    def account_spec(self, account_spec):
        """Sets the account_spec of this StartOrderStrategy.


        :param account_spec: The account_spec of this StartOrderStrategy.  # noqa: E501
        :type: str
        """

        self._account_spec = account_spec

    @property
    def symbol(self):
        """Gets the symbol of this StartOrderStrategy.  # noqa: E501


        :return: The symbol of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StartOrderStrategy.


        :param symbol: The symbol of this StartOrderStrategy.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def order_strategy_type_id(self):
        """Gets the order_strategy_type_id of this StartOrderStrategy.  # noqa: E501


        :return: The order_strategy_type_id of this StartOrderStrategy.  # noqa: E501
        :rtype: int
        """
        return self._order_strategy_type_id

    @order_strategy_type_id.setter
    def order_strategy_type_id(self, order_strategy_type_id):
        """Sets the order_strategy_type_id of this StartOrderStrategy.


        :param order_strategy_type_id: The order_strategy_type_id of this StartOrderStrategy.  # noqa: E501
        :type: int
        """
        if order_strategy_type_id is None:
            raise ValueError("Invalid value for `order_strategy_type_id`, must not be `None`")  # noqa: E501

        self._order_strategy_type_id = order_strategy_type_id

    @property
    def action(self):
        """Gets the action of this StartOrderStrategy.  # noqa: E501

        Buy, Sell  # noqa: E501

        :return: The action of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StartOrderStrategy.

        Buy, Sell  # noqa: E501

        :param action: The action of this StartOrderStrategy.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["Buy", "Sell"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def params(self):
        """Gets the params of this StartOrderStrategy.  # noqa: E501


        :return: The params of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this StartOrderStrategy.


        :param params: The params of this StartOrderStrategy.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def uuid(self):
        """Gets the uuid of this StartOrderStrategy.  # noqa: E501


        :return: The uuid of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StartOrderStrategy.


        :param uuid: The uuid of this StartOrderStrategy.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def custom_tag50(self):
        """Gets the custom_tag50 of this StartOrderStrategy.  # noqa: E501


        :return: The custom_tag50 of this StartOrderStrategy.  # noqa: E501
        :rtype: str
        """
        return self._custom_tag50

    @custom_tag50.setter
    def custom_tag50(self, custom_tag50):
        """Sets the custom_tag50 of this StartOrderStrategy.


        :param custom_tag50: The custom_tag50 of this StartOrderStrategy.  # noqa: E501
        :type: str
        """

        self._custom_tag50 = custom_tag50

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StartOrderStrategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartOrderStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
