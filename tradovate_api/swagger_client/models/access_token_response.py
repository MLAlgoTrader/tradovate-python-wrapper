# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_text': 'str',
        'access_token': 'str',
        'expiration_time': 'datetime',
        'password_expiration_time': 'datetime',
        'user_status': 'str',
        'user_id': 'int',
        'name': 'str',
        'has_live': 'bool'
    }

    attribute_map = {
        'error_text': 'errorText',
        'access_token': 'accessToken',
        'expiration_time': 'expirationTime',
        'password_expiration_time': 'passwordExpirationTime',
        'user_status': 'userStatus',
        'user_id': 'userId',
        'name': 'name',
        'has_live': 'hasLive'
    }

    def __init__(self, error_text=None, access_token=None, expiration_time=None, password_expiration_time=None, user_status=None, user_id=None, name=None, has_live=None):  # noqa: E501
        """AccessTokenResponse - a model defined in Swagger"""  # noqa: E501
        self._error_text = None
        self._access_token = None
        self._expiration_time = None
        self._password_expiration_time = None
        self._user_status = None
        self._user_id = None
        self._name = None
        self._has_live = None
        self.discriminator = None
        if error_text is not None:
            self.error_text = error_text
        if access_token is not None:
            self.access_token = access_token
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if password_expiration_time is not None:
            self.password_expiration_time = password_expiration_time
        if user_status is not None:
            self.user_status = user_status
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if has_live is not None:
            self.has_live = has_live

    @property
    def error_text(self):
        """Gets the error_text of this AccessTokenResponse.  # noqa: E501

        Non-empty if the request failed  # noqa: E501

        :return: The error_text of this AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this AccessTokenResponse.

        Non-empty if the request failed  # noqa: E501

        :param error_text: The error_text of this AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def access_token(self):
        """Gets the access_token of this AccessTokenResponse.  # noqa: E501


        :return: The access_token of this AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessTokenResponse.


        :param access_token: The access_token of this AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def expiration_time(self):
        """Gets the expiration_time of this AccessTokenResponse.  # noqa: E501


        :return: The expiration_time of this AccessTokenResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this AccessTokenResponse.


        :param expiration_time: The expiration_time of this AccessTokenResponse.  # noqa: E501
        :type: datetime
        """

        self._expiration_time = expiration_time

    @property
    def password_expiration_time(self):
        """Gets the password_expiration_time of this AccessTokenResponse.  # noqa: E501


        :return: The password_expiration_time of this AccessTokenResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._password_expiration_time

    @password_expiration_time.setter
    def password_expiration_time(self, password_expiration_time):
        """Sets the password_expiration_time of this AccessTokenResponse.


        :param password_expiration_time: The password_expiration_time of this AccessTokenResponse.  # noqa: E501
        :type: datetime
        """

        self._password_expiration_time = password_expiration_time

    @property
    def user_status(self):
        """Gets the user_status of this AccessTokenResponse.  # noqa: E501

        Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail  # noqa: E501

        :return: The user_status of this AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this AccessTokenResponse.

        Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail  # noqa: E501

        :param user_status: The user_status of this AccessTokenResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Closed", "Initiated", "TemporaryLocked", "UnconfirmedEmail"]  # noqa: E501
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"  # noqa: E501
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    @property
    def user_id(self):
        """Gets the user_id of this AccessTokenResponse.  # noqa: E501


        :return: The user_id of this AccessTokenResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessTokenResponse.


        :param user_id: The user_id of this AccessTokenResponse.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this AccessTokenResponse.  # noqa: E501


        :return: The name of this AccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessTokenResponse.


        :param name: The name of this AccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_live(self):
        """Gets the has_live of this AccessTokenResponse.  # noqa: E501


        :return: The has_live of this AccessTokenResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_live

    @has_live.setter
    def has_live(self, has_live):
        """Sets the has_live of this AccessTokenResponse.


        :param has_live: The has_live of this AccessTokenResponse.  # noqa: E501
        :type: bool
        """

        self._has_live = has_live

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
