# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductFeeParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clearing_fee': 'float',
        'clearing_currency_id': 'int',
        'exchange_fee': 'float',
        'exchange_currency_id': 'int',
        'nfa_fee': 'float',
        'nfa_currency_id': 'int',
        'brokerage_fee': 'float',
        'brokerage_currency_id': 'int',
        'ip_fee': 'float',
        'ip_currency_id': 'int',
        'commission': 'float',
        'commission_currency_id': 'int',
        'order_routing_fee': 'float',
        'order_routing_currency_id': 'int',
        'product_id': 'int',
        'day_margin': 'float',
        'night_margin': 'float',
        'full_margin': 'ProductMargin'
    }

    attribute_map = {
        'clearing_fee': 'clearingFee',
        'clearing_currency_id': 'clearingCurrencyId',
        'exchange_fee': 'exchangeFee',
        'exchange_currency_id': 'exchangeCurrencyId',
        'nfa_fee': 'nfaFee',
        'nfa_currency_id': 'nfaCurrencyId',
        'brokerage_fee': 'brokerageFee',
        'brokerage_currency_id': 'brokerageCurrencyId',
        'ip_fee': 'ipFee',
        'ip_currency_id': 'ipCurrencyId',
        'commission': 'commission',
        'commission_currency_id': 'commissionCurrencyId',
        'order_routing_fee': 'orderRoutingFee',
        'order_routing_currency_id': 'orderRoutingCurrencyId',
        'product_id': 'productId',
        'day_margin': 'dayMargin',
        'night_margin': 'nightMargin',
        'full_margin': 'fullMargin'
    }

    def __init__(self, clearing_fee=None, clearing_currency_id=None, exchange_fee=None, exchange_currency_id=None, nfa_fee=None, nfa_currency_id=None, brokerage_fee=None, brokerage_currency_id=None, ip_fee=None, ip_currency_id=None, commission=None, commission_currency_id=None, order_routing_fee=None, order_routing_currency_id=None, product_id=None, day_margin=None, night_margin=None, full_margin=None):  # noqa: E501
        """ProductFeeParams - a model defined in Swagger"""  # noqa: E501
        self._clearing_fee = None
        self._clearing_currency_id = None
        self._exchange_fee = None
        self._exchange_currency_id = None
        self._nfa_fee = None
        self._nfa_currency_id = None
        self._brokerage_fee = None
        self._brokerage_currency_id = None
        self._ip_fee = None
        self._ip_currency_id = None
        self._commission = None
        self._commission_currency_id = None
        self._order_routing_fee = None
        self._order_routing_currency_id = None
        self._product_id = None
        self._day_margin = None
        self._night_margin = None
        self._full_margin = None
        self.discriminator = None
        if clearing_fee is not None:
            self.clearing_fee = clearing_fee
        if clearing_currency_id is not None:
            self.clearing_currency_id = clearing_currency_id
        if exchange_fee is not None:
            self.exchange_fee = exchange_fee
        if exchange_currency_id is not None:
            self.exchange_currency_id = exchange_currency_id
        if nfa_fee is not None:
            self.nfa_fee = nfa_fee
        if nfa_currency_id is not None:
            self.nfa_currency_id = nfa_currency_id
        if brokerage_fee is not None:
            self.brokerage_fee = brokerage_fee
        if brokerage_currency_id is not None:
            self.brokerage_currency_id = brokerage_currency_id
        if ip_fee is not None:
            self.ip_fee = ip_fee
        if ip_currency_id is not None:
            self.ip_currency_id = ip_currency_id
        if commission is not None:
            self.commission = commission
        if commission_currency_id is not None:
            self.commission_currency_id = commission_currency_id
        if order_routing_fee is not None:
            self.order_routing_fee = order_routing_fee
        if order_routing_currency_id is not None:
            self.order_routing_currency_id = order_routing_currency_id
        self.product_id = product_id
        if day_margin is not None:
            self.day_margin = day_margin
        if night_margin is not None:
            self.night_margin = night_margin
        if full_margin is not None:
            self.full_margin = full_margin

    @property
    def clearing_fee(self):
        """Gets the clearing_fee of this ProductFeeParams.  # noqa: E501


        :return: The clearing_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._clearing_fee

    @clearing_fee.setter
    def clearing_fee(self, clearing_fee):
        """Sets the clearing_fee of this ProductFeeParams.


        :param clearing_fee: The clearing_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._clearing_fee = clearing_fee

    @property
    def clearing_currency_id(self):
        """Gets the clearing_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The clearing_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._clearing_currency_id

    @clearing_currency_id.setter
    def clearing_currency_id(self, clearing_currency_id):
        """Sets the clearing_currency_id of this ProductFeeParams.


        :param clearing_currency_id: The clearing_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._clearing_currency_id = clearing_currency_id

    @property
    def exchange_fee(self):
        """Gets the exchange_fee of this ProductFeeParams.  # noqa: E501


        :return: The exchange_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._exchange_fee

    @exchange_fee.setter
    def exchange_fee(self, exchange_fee):
        """Sets the exchange_fee of this ProductFeeParams.


        :param exchange_fee: The exchange_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._exchange_fee = exchange_fee

    @property
    def exchange_currency_id(self):
        """Gets the exchange_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The exchange_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._exchange_currency_id

    @exchange_currency_id.setter
    def exchange_currency_id(self, exchange_currency_id):
        """Sets the exchange_currency_id of this ProductFeeParams.


        :param exchange_currency_id: The exchange_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._exchange_currency_id = exchange_currency_id

    @property
    def nfa_fee(self):
        """Gets the nfa_fee of this ProductFeeParams.  # noqa: E501


        :return: The nfa_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._nfa_fee

    @nfa_fee.setter
    def nfa_fee(self, nfa_fee):
        """Sets the nfa_fee of this ProductFeeParams.


        :param nfa_fee: The nfa_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._nfa_fee = nfa_fee

    @property
    def nfa_currency_id(self):
        """Gets the nfa_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The nfa_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._nfa_currency_id

    @nfa_currency_id.setter
    def nfa_currency_id(self, nfa_currency_id):
        """Sets the nfa_currency_id of this ProductFeeParams.


        :param nfa_currency_id: The nfa_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._nfa_currency_id = nfa_currency_id

    @property
    def brokerage_fee(self):
        """Gets the brokerage_fee of this ProductFeeParams.  # noqa: E501


        :return: The brokerage_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._brokerage_fee

    @brokerage_fee.setter
    def brokerage_fee(self, brokerage_fee):
        """Sets the brokerage_fee of this ProductFeeParams.


        :param brokerage_fee: The brokerage_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._brokerage_fee = brokerage_fee

    @property
    def brokerage_currency_id(self):
        """Gets the brokerage_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The brokerage_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._brokerage_currency_id

    @brokerage_currency_id.setter
    def brokerage_currency_id(self, brokerage_currency_id):
        """Sets the brokerage_currency_id of this ProductFeeParams.


        :param brokerage_currency_id: The brokerage_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._brokerage_currency_id = brokerage_currency_id

    @property
    def ip_fee(self):
        """Gets the ip_fee of this ProductFeeParams.  # noqa: E501


        :return: The ip_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._ip_fee

    @ip_fee.setter
    def ip_fee(self, ip_fee):
        """Sets the ip_fee of this ProductFeeParams.


        :param ip_fee: The ip_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._ip_fee = ip_fee

    @property
    def ip_currency_id(self):
        """Gets the ip_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The ip_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._ip_currency_id

    @ip_currency_id.setter
    def ip_currency_id(self, ip_currency_id):
        """Sets the ip_currency_id of this ProductFeeParams.


        :param ip_currency_id: The ip_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._ip_currency_id = ip_currency_id

    @property
    def commission(self):
        """Gets the commission of this ProductFeeParams.  # noqa: E501


        :return: The commission of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this ProductFeeParams.


        :param commission: The commission of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._commission = commission

    @property
    def commission_currency_id(self):
        """Gets the commission_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The commission_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._commission_currency_id

    @commission_currency_id.setter
    def commission_currency_id(self, commission_currency_id):
        """Sets the commission_currency_id of this ProductFeeParams.


        :param commission_currency_id: The commission_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._commission_currency_id = commission_currency_id

    @property
    def order_routing_fee(self):
        """Gets the order_routing_fee of this ProductFeeParams.  # noqa: E501


        :return: The order_routing_fee of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._order_routing_fee

    @order_routing_fee.setter
    def order_routing_fee(self, order_routing_fee):
        """Sets the order_routing_fee of this ProductFeeParams.


        :param order_routing_fee: The order_routing_fee of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._order_routing_fee = order_routing_fee

    @property
    def order_routing_currency_id(self):
        """Gets the order_routing_currency_id of this ProductFeeParams.  # noqa: E501


        :return: The order_routing_currency_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._order_routing_currency_id

    @order_routing_currency_id.setter
    def order_routing_currency_id(self, order_routing_currency_id):
        """Sets the order_routing_currency_id of this ProductFeeParams.


        :param order_routing_currency_id: The order_routing_currency_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """

        self._order_routing_currency_id = order_routing_currency_id

    @property
    def product_id(self):
        """Gets the product_id of this ProductFeeParams.  # noqa: E501


        :return: The product_id of this ProductFeeParams.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductFeeParams.


        :param product_id: The product_id of this ProductFeeParams.  # noqa: E501
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def day_margin(self):
        """Gets the day_margin of this ProductFeeParams.  # noqa: E501


        :return: The day_margin of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._day_margin

    @day_margin.setter
    def day_margin(self, day_margin):
        """Sets the day_margin of this ProductFeeParams.


        :param day_margin: The day_margin of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._day_margin = day_margin

    @property
    def night_margin(self):
        """Gets the night_margin of this ProductFeeParams.  # noqa: E501


        :return: The night_margin of this ProductFeeParams.  # noqa: E501
        :rtype: float
        """
        return self._night_margin

    @night_margin.setter
    def night_margin(self, night_margin):
        """Sets the night_margin of this ProductFeeParams.


        :param night_margin: The night_margin of this ProductFeeParams.  # noqa: E501
        :type: float
        """

        self._night_margin = night_margin

    @property
    def full_margin(self):
        """Gets the full_margin of this ProductFeeParams.  # noqa: E501


        :return: The full_margin of this ProductFeeParams.  # noqa: E501
        :rtype: ProductMargin
        """
        return self._full_margin

    @full_margin.setter
    def full_margin(self, full_margin):
        """Sets the full_margin of this ProductFeeParams.


        :param full_margin: The full_margin of this ProductFeeParams.  # noqa: E501
        :type: ProductMargin
        """

        self._full_margin = full_margin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductFeeParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFeeParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
