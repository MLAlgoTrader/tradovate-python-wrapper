# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAccountRiskParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'contract_id': 'int',
        'product_id': 'int',
        'exchange_id': 'int',
        'product_type': 'str',
        'risk_discount_contract_group_id': 'int',
        'product_verification_status': 'str',
        'contract_group_id': 'int',
        'max_opening_order_qty': 'int',
        'max_closing_order_qty': 'int',
        'max_back_month': 'int',
        'pre_expiration_days': 'int',
        'margin_percentage': 'float',
        'margin_dollar_value': 'float',
        'hard_limit': 'bool',
        'user_account_position_limit_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'contract_id': 'contractId',
        'product_id': 'productId',
        'exchange_id': 'exchangeId',
        'product_type': 'productType',
        'risk_discount_contract_group_id': 'riskDiscountContractGroupId',
        'product_verification_status': 'productVerificationStatus',
        'contract_group_id': 'contractGroupId',
        'max_opening_order_qty': 'maxOpeningOrderQty',
        'max_closing_order_qty': 'maxClosingOrderQty',
        'max_back_month': 'maxBackMonth',
        'pre_expiration_days': 'preExpirationDays',
        'margin_percentage': 'marginPercentage',
        'margin_dollar_value': 'marginDollarValue',
        'hard_limit': 'hardLimit',
        'user_account_position_limit_id': 'userAccountPositionLimitId'
    }

    def __init__(self, id=None, contract_id=None, product_id=None, exchange_id=None, product_type=None, risk_discount_contract_group_id=None, product_verification_status=None, contract_group_id=None, max_opening_order_qty=None, max_closing_order_qty=None, max_back_month=None, pre_expiration_days=None, margin_percentage=None, margin_dollar_value=None, hard_limit=None, user_account_position_limit_id=None):  # noqa: E501
        """UserAccountRiskParameter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._contract_id = None
        self._product_id = None
        self._exchange_id = None
        self._product_type = None
        self._risk_discount_contract_group_id = None
        self._product_verification_status = None
        self._contract_group_id = None
        self._max_opening_order_qty = None
        self._max_closing_order_qty = None
        self._max_back_month = None
        self._pre_expiration_days = None
        self._margin_percentage = None
        self._margin_dollar_value = None
        self._hard_limit = None
        self._user_account_position_limit_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if contract_id is not None:
            self.contract_id = contract_id
        if product_id is not None:
            self.product_id = product_id
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if product_type is not None:
            self.product_type = product_type
        if risk_discount_contract_group_id is not None:
            self.risk_discount_contract_group_id = risk_discount_contract_group_id
        if product_verification_status is not None:
            self.product_verification_status = product_verification_status
        if contract_group_id is not None:
            self.contract_group_id = contract_group_id
        if max_opening_order_qty is not None:
            self.max_opening_order_qty = max_opening_order_qty
        if max_closing_order_qty is not None:
            self.max_closing_order_qty = max_closing_order_qty
        if max_back_month is not None:
            self.max_back_month = max_back_month
        if pre_expiration_days is not None:
            self.pre_expiration_days = pre_expiration_days
        if margin_percentage is not None:
            self.margin_percentage = margin_percentage
        if margin_dollar_value is not None:
            self.margin_dollar_value = margin_dollar_value
        if hard_limit is not None:
            self.hard_limit = hard_limit
        self.user_account_position_limit_id = user_account_position_limit_id

    @property
    def id(self):
        """Gets the id of this UserAccountRiskParameter.  # noqa: E501


        :return: The id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAccountRiskParameter.


        :param id: The id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def contract_id(self):
        """Gets the contract_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The contract_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this UserAccountRiskParameter.


        :param contract_id: The contract_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def product_id(self):
        """Gets the product_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The product_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this UserAccountRiskParameter.


        :param product_id: The product_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def exchange_id(self):
        """Gets the exchange_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The exchange_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this UserAccountRiskParameter.


        :param exchange_id: The exchange_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._exchange_id = exchange_id

    @property
    def product_type(self):
        """Gets the product_type of this UserAccountRiskParameter.  # noqa: E501

        CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread  # noqa: E501

        :return: The product_type of this UserAccountRiskParameter.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this UserAccountRiskParameter.

        CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread  # noqa: E501

        :param product_type: The product_type of this UserAccountRiskParameter.  # noqa: E501
        :type: str
        """
        allowed_values = ["CommonStock", "Continuous", "Cryptocurrency", "Futures", "MarketInternals", "Options", "Spread"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def risk_discount_contract_group_id(self):
        """Gets the risk_discount_contract_group_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The risk_discount_contract_group_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._risk_discount_contract_group_id

    @risk_discount_contract_group_id.setter
    def risk_discount_contract_group_id(self, risk_discount_contract_group_id):
        """Sets the risk_discount_contract_group_id of this UserAccountRiskParameter.


        :param risk_discount_contract_group_id: The risk_discount_contract_group_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._risk_discount_contract_group_id = risk_discount_contract_group_id

    @property
    def product_verification_status(self):
        """Gets the product_verification_status of this UserAccountRiskParameter.  # noqa: E501

        Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified  # noqa: E501

        :return: The product_verification_status of this UserAccountRiskParameter.  # noqa: E501
        :rtype: str
        """
        return self._product_verification_status

    @product_verification_status.setter
    def product_verification_status(self, product_verification_status):
        """Sets the product_verification_status of this UserAccountRiskParameter.

        Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified  # noqa: E501

        :param product_verification_status: The product_verification_status of this UserAccountRiskParameter.  # noqa: E501
        :type: str
        """
        allowed_values = ["Inactive", "Locked", "ReadyForContracts", "ReadyToTrade", "Verified"]  # noqa: E501
        if product_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `product_verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(product_verification_status, allowed_values)
            )

        self._product_verification_status = product_verification_status

    @property
    def contract_group_id(self):
        """Gets the contract_group_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The contract_group_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._contract_group_id

    @contract_group_id.setter
    def contract_group_id(self, contract_group_id):
        """Sets the contract_group_id of this UserAccountRiskParameter.


        :param contract_group_id: The contract_group_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._contract_group_id = contract_group_id

    @property
    def max_opening_order_qty(self):
        """Gets the max_opening_order_qty of this UserAccountRiskParameter.  # noqa: E501


        :return: The max_opening_order_qty of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._max_opening_order_qty

    @max_opening_order_qty.setter
    def max_opening_order_qty(self, max_opening_order_qty):
        """Sets the max_opening_order_qty of this UserAccountRiskParameter.


        :param max_opening_order_qty: The max_opening_order_qty of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._max_opening_order_qty = max_opening_order_qty

    @property
    def max_closing_order_qty(self):
        """Gets the max_closing_order_qty of this UserAccountRiskParameter.  # noqa: E501


        :return: The max_closing_order_qty of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._max_closing_order_qty

    @max_closing_order_qty.setter
    def max_closing_order_qty(self, max_closing_order_qty):
        """Sets the max_closing_order_qty of this UserAccountRiskParameter.


        :param max_closing_order_qty: The max_closing_order_qty of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._max_closing_order_qty = max_closing_order_qty

    @property
    def max_back_month(self):
        """Gets the max_back_month of this UserAccountRiskParameter.  # noqa: E501


        :return: The max_back_month of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._max_back_month

    @max_back_month.setter
    def max_back_month(self, max_back_month):
        """Sets the max_back_month of this UserAccountRiskParameter.


        :param max_back_month: The max_back_month of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._max_back_month = max_back_month

    @property
    def pre_expiration_days(self):
        """Gets the pre_expiration_days of this UserAccountRiskParameter.  # noqa: E501


        :return: The pre_expiration_days of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._pre_expiration_days

    @pre_expiration_days.setter
    def pre_expiration_days(self, pre_expiration_days):
        """Sets the pre_expiration_days of this UserAccountRiskParameter.


        :param pre_expiration_days: The pre_expiration_days of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """

        self._pre_expiration_days = pre_expiration_days

    @property
    def margin_percentage(self):
        """Gets the margin_percentage of this UserAccountRiskParameter.  # noqa: E501


        :return: The margin_percentage of this UserAccountRiskParameter.  # noqa: E501
        :rtype: float
        """
        return self._margin_percentage

    @margin_percentage.setter
    def margin_percentage(self, margin_percentage):
        """Sets the margin_percentage of this UserAccountRiskParameter.


        :param margin_percentage: The margin_percentage of this UserAccountRiskParameter.  # noqa: E501
        :type: float
        """

        self._margin_percentage = margin_percentage

    @property
    def margin_dollar_value(self):
        """Gets the margin_dollar_value of this UserAccountRiskParameter.  # noqa: E501


        :return: The margin_dollar_value of this UserAccountRiskParameter.  # noqa: E501
        :rtype: float
        """
        return self._margin_dollar_value

    @margin_dollar_value.setter
    def margin_dollar_value(self, margin_dollar_value):
        """Sets the margin_dollar_value of this UserAccountRiskParameter.


        :param margin_dollar_value: The margin_dollar_value of this UserAccountRiskParameter.  # noqa: E501
        :type: float
        """

        self._margin_dollar_value = margin_dollar_value

    @property
    def hard_limit(self):
        """Gets the hard_limit of this UserAccountRiskParameter.  # noqa: E501


        :return: The hard_limit of this UserAccountRiskParameter.  # noqa: E501
        :rtype: bool
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this UserAccountRiskParameter.


        :param hard_limit: The hard_limit of this UserAccountRiskParameter.  # noqa: E501
        :type: bool
        """

        self._hard_limit = hard_limit

    @property
    def user_account_position_limit_id(self):
        """Gets the user_account_position_limit_id of this UserAccountRiskParameter.  # noqa: E501


        :return: The user_account_position_limit_id of this UserAccountRiskParameter.  # noqa: E501
        :rtype: int
        """
        return self._user_account_position_limit_id

    @user_account_position_limit_id.setter
    def user_account_position_limit_id(self, user_account_position_limit_id):
        """Sets the user_account_position_limit_id of this UserAccountRiskParameter.


        :param user_account_position_limit_id: The user_account_position_limit_id of this UserAccountRiskParameter.  # noqa: E501
        :type: int
        """
        if user_account_position_limit_id is None:
            raise ValueError("Invalid value for `user_account_position_limit_id`, must not be `None`")  # noqa: E501

        self._user_account_position_limit_id = user_account_position_limit_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAccountRiskParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAccountRiskParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
