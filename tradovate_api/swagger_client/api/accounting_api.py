# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_dependents(self, masterid, **kwargs):  # noqa: E501
        """account_dependents  # noqa: E501

        Retrieves all entities of Account type related to User entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of User entity (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.account_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def account_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """account_dependents  # noqa: E501

        Retrieves all entities of Account type related to User entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of User entity (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `account_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_find(self, name, **kwargs):  # noqa: E501
        """account_find  # noqa: E501

        Retrieves an entity of Account type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_find(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_find_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.account_find_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def account_find_with_http_info(self, name, **kwargs):  # noqa: E501
        """account_find  # noqa: E501

        Retrieves an entity of Account type by its name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_find_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `account_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_item(self, id, **kwargs):  # noqa: E501
        """account_item  # noqa: E501

        Retrieves an entity of Account type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def account_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """account_item  # noqa: E501

        Retrieves an entity of Account type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `account_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_items(self, ids, **kwargs):  # noqa: E501
        """account_items  # noqa: E501

        Retrieves multiple entities of Account type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.account_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def account_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """account_items  # noqa: E501

        Retrieves multiple entities of Account type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `account_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """account_l_dependents  # noqa: E501

        Retrieves all entities of Account type related to multiple entities of User type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of User entities (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.account_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def account_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """account_l_dependents  # noqa: E501

        Retrieves all entities of Account type related to multiple entities of User type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of User entities (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `account_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_list(self, **kwargs):  # noqa: E501
        """account_list  # noqa: E501

        Retrieves all entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_list_with_http_info(self, **kwargs):  # noqa: E501
        """account_list  # noqa: E501

        Retrieves all entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        
        local_var_files = {}
        
        import os
        
        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        # Authentication setting
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_suggest(self, t, l, **kwargs):  # noqa: E501
        """account_suggest  # noqa: E501

        Retrieves entities of Account type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_suggest(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
        else:
            (data) = self.account_suggest_with_http_info(t, l, **kwargs)  # noqa: E501
            return data

    def account_suggest_with_http_info(self, t, l, **kwargs):  # noqa: E501
        """account_suggest  # noqa: E501

        Retrieves entities of Account type filtered by an occurrence of a text in one of its fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_suggest_with_http_info(t, l, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str t: Text (required)
        :param int l: Max number of entities (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['t', 'l']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 't' is set
        if ('t' not in params or
                params['t'] is None):
            raise ValueError("Missing the required parameter `t` when calling `account_suggest`")  # noqa: E501
        # verify the required parameter 'l' is set
        if ('l' not in params or
                params['l'] is None):
            raise ValueError("Missing the required parameter `l` when calling `account_suggest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/account/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_dependents(self, masterid, **kwargs):  # noqa: E501
        """cash_balance_dependents  # noqa: E501

        Retrieves all entities of CashBalance type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def cash_balance_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """cash_balance_dependents  # noqa: E501

        Retrieves all entities of CashBalance type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `cash_balance_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_item(self, id, **kwargs):  # noqa: E501
        """cash_balance_item  # noqa: E501

        Retrieves an entity of CashBalance type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CashBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_balance_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_balance_item  # noqa: E501

        Retrieves an entity of CashBalance type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CashBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cash_balance_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CashBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_items(self, ids, **kwargs):  # noqa: E501
        """cash_balance_items  # noqa: E501

        Retrieves multiple entities of CashBalance type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def cash_balance_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """cash_balance_items  # noqa: E501

        Retrieves multiple entities of CashBalance type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `cash_balance_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """cash_balance_l_dependents  # noqa: E501

        Retrieves all entities of CashBalance type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def cash_balance_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """cash_balance_l_dependents  # noqa: E501

        Retrieves all entities of CashBalance type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `cash_balance_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_list(self, **kwargs):  # noqa: E501
        """cash_balance_list  # noqa: E501

        Retrieves all entities of CashBalance type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_balance_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_balance_list  # noqa: E501

        Retrieves all entities of CashBalance type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CashBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_log_dependents(self, masterid, **kwargs):  # noqa: E501
        """cash_balance_log_dependents  # noqa: E501

        Retrieves all entities of CashBalanceLog type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_log_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_log_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def cash_balance_log_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """cash_balance_log_dependents  # noqa: E501

        Retrieves all entities of CashBalanceLog type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_log_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `cash_balance_log_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalanceLog/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalanceLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_log_item(self, id, **kwargs):  # noqa: E501
        """cash_balance_log_item  # noqa: E501

        Retrieves an entity of CashBalanceLog type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CashBalanceLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_log_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_log_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_balance_log_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_balance_log_item  # noqa: E501

        Retrieves an entity of CashBalanceLog type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CashBalanceLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_log_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cash_balance_log_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalanceLog/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CashBalanceLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_log_items(self, ids, **kwargs):  # noqa: E501
        """cash_balance_log_items  # noqa: E501

        Retrieves multiple entities of CashBalanceLog type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_log_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_log_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def cash_balance_log_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """cash_balance_log_items  # noqa: E501

        Retrieves multiple entities of CashBalanceLog type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_log_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `cash_balance_log_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalanceLog/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalanceLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_balance_log_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """cash_balance_log_l_dependents  # noqa: E501

        Retrieves all entities of CashBalanceLog type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_balance_log_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_balance_log_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def cash_balance_log_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """cash_balance_log_l_dependents  # noqa: E501

        Retrieves all entities of CashBalanceLog type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_balance_log_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[CashBalanceLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_balance_log_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `cash_balance_log_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalanceLog/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CashBalanceLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cash_balance_snapshot(self, body, **kwargs):  # noqa: E501
        """get_cash_balance_snapshot  # noqa: E501

        ### Get a snapshot of an account's current cash balance. > *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cash_balance_snapshot(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetCashBalanceSnapshot body: (required)
        :return: CashBalanceSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cash_balance_snapshot_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cash_balance_snapshot_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_cash_balance_snapshot_with_http_info(self, body, **kwargs):  # noqa: E501
        """get_cash_balance_snapshot  # noqa: E501

        ### Get a snapshot of an account's current cash balance. > *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cash_balance_snapshot_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetCashBalanceSnapshot body: (required)
        :return: CashBalanceSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cash_balance_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_cash_balance_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/cashBalance/getcashbalancesnapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CashBalanceSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def margin_snapshot_dependents(self, masterid, **kwargs):  # noqa: E501
        """margin_snapshot_dependents  # noqa: E501

        Retrieves all entities of MarginSnapshot type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.margin_snapshot_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.margin_snapshot_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def margin_snapshot_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """margin_snapshot_dependents  # noqa: E501

        Retrieves all entities of MarginSnapshot type related to Account entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of Account entity (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method margin_snapshot_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `margin_snapshot_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marginSnapshot/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def margin_snapshot_item(self, id, **kwargs):  # noqa: E501
        """margin_snapshot_item  # noqa: E501

        Retrieves an entity of MarginSnapshot type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarginSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.margin_snapshot_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.margin_snapshot_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def margin_snapshot_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """margin_snapshot_item  # noqa: E501

        Retrieves an entity of MarginSnapshot type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: MarginSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method margin_snapshot_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `margin_snapshot_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marginSnapshot/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarginSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def margin_snapshot_items(self, ids, **kwargs):  # noqa: E501
        """margin_snapshot_items  # noqa: E501

        Retrieves multiple entities of MarginSnapshot type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.margin_snapshot_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.margin_snapshot_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def margin_snapshot_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """margin_snapshot_items  # noqa: E501

        Retrieves multiple entities of MarginSnapshot type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method margin_snapshot_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `margin_snapshot_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marginSnapshot/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def margin_snapshot_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """margin_snapshot_l_dependents  # noqa: E501

        Retrieves all entities of MarginSnapshot type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.margin_snapshot_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.margin_snapshot_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def margin_snapshot_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """margin_snapshot_l_dependents  # noqa: E501

        Retrieves all entities of MarginSnapshot type related to multiple entities of Account type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of Account entities (required)
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method margin_snapshot_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `margin_snapshot_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marginSnapshot/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def margin_snapshot_list(self, **kwargs):  # noqa: E501
        """margin_snapshot_list  # noqa: E501

        Retrieves all entities of MarginSnapshot type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.margin_snapshot_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.margin_snapshot_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def margin_snapshot_list_with_http_info(self, **kwargs):  # noqa: E501
        """margin_snapshot_list  # noqa: E501

        Retrieves all entities of MarginSnapshot type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.margin_snapshot_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarginSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method margin_snapshot_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/marginSnapshot/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_permission_dependents(self, masterid, **kwargs):  # noqa: E501
        """trading_permission_dependents  # noqa: E501

        Retrieves all entities of TradingPermission type related to User entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_dependents(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of User entity (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_permission_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
        else:
            (data) = self.trading_permission_dependents_with_http_info(masterid, **kwargs)  # noqa: E501
            return data

    def trading_permission_dependents_with_http_info(self, masterid, **kwargs):  # noqa: E501
        """trading_permission_dependents  # noqa: E501

        Retrieves all entities of TradingPermission type related to User entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_dependents_with_http_info(masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int masterid: id of User entity (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_permission_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterid' is set
        if ('masterid' not in params or
                params['masterid'] is None):
            raise ValueError("Missing the required parameter `masterid` when calling `trading_permission_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradingPermission/deps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradingPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_permission_item(self, id, **kwargs):  # noqa: E501
        """trading_permission_item  # noqa: E501

        Retrieves an entity of TradingPermission type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: TradingPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_permission_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.trading_permission_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def trading_permission_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """trading_permission_item  # noqa: E501

        Retrieves an entity of TradingPermission type by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: TradingPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_permission_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `trading_permission_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradingPermission/item', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradingPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_permission_items(self, ids, **kwargs):  # noqa: E501
        """trading_permission_items  # noqa: E501

        Retrieves multiple entities of TradingPermission type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_items(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_permission_items_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.trading_permission_items_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def trading_permission_items_with_http_info(self, ids, **kwargs):  # noqa: E501
        """trading_permission_items  # noqa: E501

        Retrieves multiple entities of TradingPermission type by its ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_items_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_permission_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `trading_permission_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradingPermission/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradingPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_permission_l_dependents(self, masterids, **kwargs):  # noqa: E501
        """trading_permission_l_dependents  # noqa: E501

        Retrieves all entities of TradingPermission type related to multiple entities of User type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_l_dependents(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of User entities (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_permission_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
        else:
            (data) = self.trading_permission_l_dependents_with_http_info(masterids, **kwargs)  # noqa: E501
            return data

    def trading_permission_l_dependents_with_http_info(self, masterids, **kwargs):  # noqa: E501
        """trading_permission_l_dependents  # noqa: E501

        Retrieves all entities of TradingPermission type related to multiple entities of User type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_l_dependents_with_http_info(masterids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] masterids: ids of User entities (required)
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['masterids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_permission_l_dependents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'masterids' is set
        if ('masterids' not in params or
                params['masterids'] is None):
            raise ValueError("Missing the required parameter `masterids` when calling `trading_permission_l_dependents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'masterids' in params:
            query_params.append(('masterids', params['masterids']))  # noqa: E501
            collection_formats['masterids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradingPermission/ldeps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradingPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_permission_list(self, **kwargs):  # noqa: E501
        """trading_permission_list  # noqa: E501

        Retrieves all entities of TradingPermission type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_permission_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.trading_permission_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def trading_permission_list_with_http_info(self, **kwargs):  # noqa: E501
        """trading_permission_list  # noqa: E501

        Retrieves all entities of TradingPermission type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_permission_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TradingPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_permission_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        header_params['Authorization'] = 'Bearer ' + os.environ['accessToken'] 
        auth_settings = ['bearer_access_token']  # noqa: E501

        return self.api_client.call_api(
            '/tradingPermission/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradingPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
