# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'user_id': 'int',
        'account_type': 'str',
        'active': 'bool',
        'clearing_house_id': 'int',
        'risk_category_id': 'int',
        'auto_liq_profile_id': 'int',
        'margin_account_type': 'str',
        'legal_status': 'str',
        'timestamp': 'datetime',
        'readonly': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_id': 'userId',
        'account_type': 'accountType',
        'active': 'active',
        'clearing_house_id': 'clearingHouseId',
        'risk_category_id': 'riskCategoryId',
        'auto_liq_profile_id': 'autoLiqProfileId',
        'margin_account_type': 'marginAccountType',
        'legal_status': 'legalStatus',
        'timestamp': 'timestamp',
        'readonly': 'readonly'
    }

    def __init__(self, id=None, name=None, user_id=None, account_type=None, active=None, clearing_house_id=None, risk_category_id=None, auto_liq_profile_id=None, margin_account_type=None, legal_status=None, timestamp=None, readonly=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._user_id = None
        self._account_type = None
        self._active = None
        self._clearing_house_id = None
        self._risk_category_id = None
        self._auto_liq_profile_id = None
        self._margin_account_type = None
        self._legal_status = None
        self._timestamp = None
        self._readonly = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.user_id = user_id
        self.account_type = account_type
        self.active = active
        self.clearing_house_id = clearing_house_id
        self.risk_category_id = risk_category_id
        self.auto_liq_profile_id = auto_liq_profile_id
        self.margin_account_type = margin_account_type
        self.legal_status = legal_status
        self.timestamp = timestamp
        if readonly is not None:
            self.readonly = readonly

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this Account.  # noqa: E501


        :return: The user_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Account.


        :param user_id: The user_id of this Account.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def account_type(self):
        """Gets the account_type of this Account.  # noqa: E501

        Customer, Giveup, House, Omnibus, Wash  # noqa: E501

        :return: The account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.

        Customer, Giveup, House, Omnibus, Wash  # noqa: E501

        :param account_type: The account_type of this Account.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Customer", "Giveup", "House", "Omnibus", "Wash"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def active(self):
        """Gets the active of this Account.  # noqa: E501


        :return: The active of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Account.


        :param active: The active of this Account.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def clearing_house_id(self):
        """Gets the clearing_house_id of this Account.  # noqa: E501


        :return: The clearing_house_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._clearing_house_id

    @clearing_house_id.setter
    def clearing_house_id(self, clearing_house_id):
        """Sets the clearing_house_id of this Account.


        :param clearing_house_id: The clearing_house_id of this Account.  # noqa: E501
        :type: int
        """
        if clearing_house_id is None:
            raise ValueError("Invalid value for `clearing_house_id`, must not be `None`")  # noqa: E501

        self._clearing_house_id = clearing_house_id

    @property
    def risk_category_id(self):
        """Gets the risk_category_id of this Account.  # noqa: E501


        :return: The risk_category_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._risk_category_id

    @risk_category_id.setter
    def risk_category_id(self, risk_category_id):
        """Sets the risk_category_id of this Account.


        :param risk_category_id: The risk_category_id of this Account.  # noqa: E501
        :type: int
        """
        if risk_category_id is None:
            raise ValueError("Invalid value for `risk_category_id`, must not be `None`")  # noqa: E501

        self._risk_category_id = risk_category_id

    @property
    def auto_liq_profile_id(self):
        """Gets the auto_liq_profile_id of this Account.  # noqa: E501


        :return: The auto_liq_profile_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._auto_liq_profile_id

    @auto_liq_profile_id.setter
    def auto_liq_profile_id(self, auto_liq_profile_id):
        """Sets the auto_liq_profile_id of this Account.


        :param auto_liq_profile_id: The auto_liq_profile_id of this Account.  # noqa: E501
        :type: int
        """
        if auto_liq_profile_id is None:
            raise ValueError("Invalid value for `auto_liq_profile_id`, must not be `None`")  # noqa: E501

        self._auto_liq_profile_id = auto_liq_profile_id

    @property
    def margin_account_type(self):
        """Gets the margin_account_type of this Account.  # noqa: E501

        Hedger, Speculator  # noqa: E501

        :return: The margin_account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._margin_account_type

    @margin_account_type.setter
    def margin_account_type(self, margin_account_type):
        """Sets the margin_account_type of this Account.

        Hedger, Speculator  # noqa: E501

        :param margin_account_type: The margin_account_type of this Account.  # noqa: E501
        :type: str
        """
        if margin_account_type is None:
            raise ValueError("Invalid value for `margin_account_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Hedger", "Speculator"]  # noqa: E501
        if margin_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `margin_account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(margin_account_type, allowed_values)
            )

        self._margin_account_type = margin_account_type

    @property
    def legal_status(self):
        """Gets the legal_status of this Account.  # noqa: E501

        Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust  # noqa: E501

        :return: The legal_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._legal_status

    @legal_status.setter
    def legal_status(self, legal_status):
        """Sets the legal_status of this Account.

        Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust  # noqa: E501

        :param legal_status: The legal_status of this Account.  # noqa: E501
        :type: str
        """
        if legal_status is None:
            raise ValueError("Invalid value for `legal_status`, must not be `None`")  # noqa: E501
        allowed_values = ["Corporation", "GP", "IRA", "Individual", "Joint", "LLC", "LLP", "LP", "Trust"]  # noqa: E501
        if legal_status not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_status` ({0}), must be one of {1}"  # noqa: E501
                .format(legal_status, allowed_values)
            )

        self._legal_status = legal_status

    @property
    def timestamp(self):
        """Gets the timestamp of this Account.  # noqa: E501


        :return: The timestamp of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Account.


        :param timestamp: The timestamp of this Account.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def readonly(self):
        """Gets the readonly of this Account.  # noqa: E501


        :return: The readonly of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Account.


        :param readonly: The readonly of this Account.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
