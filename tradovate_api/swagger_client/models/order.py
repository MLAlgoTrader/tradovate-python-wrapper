# coding: utf-8

"""
    Tradovate API

    # Getting Started With the Tradovate API The Tradovate API is a robust web interface that clients can utilize to bring our Trading services to their own applications and  extensions. There are a number of supported operations that a client can perform by accessing the REST API. Essentially any functionality that is available on the Tradovate Trader application is also exposed via the API. For the comprehensive JavaScript guide to using our API, please go [here](https://github.com/tradovate/example-api-js/).  ## Place and Modify Orders The Tradovate REST API makes it easy to place and modify orders from code. Any type of order supported by the Tradovate Trader application is also able to be placed via the REST API. For interactive examples see the [Orders](#tag/Orders) section.  ## Query Positions, Contracts, Maturities and More From the Tradovate REST API we can get data about positions, contracts, products, prices, currencies, maturities, and more. Any data that you could view by browsing Tradovate Trader is queryable from the API. For interactive examples see the [ContractLibrary](#tag/ContractLibrary) section.  ## Query Account Data Using our `/account/*` operations allow you to do things like find an account by its ID, get a snapshot of an account's current cash balance, and access account trading permissions. For interactive examples see the [Accounting](#tag/Accounting) section.  ## Manage Risk We can use all of the risk management features available on Tradovate Trader from the API. This includes setting position limits and creating, deleting, and modifying risk-parameters. For live examples, see the [Risk](#tag/Risks) section.  ## Access Alert and Live Chat Functions You can use the REST API to generate alerts which can be seen from the Tradovate Trader application. You can use all of the Chat functionality from from  the REST API. This includes opening and closing the chat context, querying and posting chat message items, and even allowing us to mark a chat item as 'read'. For more examples see the [Alerts](#tag/Alerts) and [Chat](#tag/Chat) sections.  ## How Do I Use the Tradovate REST API? In order to access the features of the Tradovate REST API you'll need to sign up for a [Tradovate Trader](https://trader.tradovate.com/welcome) account. You must meet some other requirements as well: - You need a LIVE account with more than $1000 in equity. - You need a subscription to API Access. - You'll need to generate an API Key.  Then you simply need to acquire an access token using your API Key, as described in the [Access](#tag/Access) section.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'contract_id': 'int',
        'spread_definition_id': 'int',
        'timestamp': 'datetime',
        'action': 'str',
        'ord_status': 'str',
        'execution_provider_id': 'int',
        'oco_id': 'int',
        'parent_id': 'int',
        'linked_id': 'int',
        'admin': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'contract_id': 'contractId',
        'spread_definition_id': 'spreadDefinitionId',
        'timestamp': 'timestamp',
        'action': 'action',
        'ord_status': 'ordStatus',
        'execution_provider_id': 'executionProviderId',
        'oco_id': 'ocoId',
        'parent_id': 'parentId',
        'linked_id': 'linkedId',
        'admin': 'admin'
    }

    def __init__(self, id=None, account_id=None, contract_id=None, spread_definition_id=None, timestamp=None, action=None, ord_status=None, execution_provider_id=None, oco_id=None, parent_id=None, linked_id=None, admin=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._contract_id = None
        self._spread_definition_id = None
        self._timestamp = None
        self._action = None
        self._ord_status = None
        self._execution_provider_id = None
        self._oco_id = None
        self._parent_id = None
        self._linked_id = None
        self._admin = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.account_id = account_id
        if contract_id is not None:
            self.contract_id = contract_id
        if spread_definition_id is not None:
            self.spread_definition_id = spread_definition_id
        self.timestamp = timestamp
        self.action = action
        self.ord_status = ord_status
        if execution_provider_id is not None:
            self.execution_provider_id = execution_provider_id
        if oco_id is not None:
            self.oco_id = oco_id
        if parent_id is not None:
            self.parent_id = parent_id
        if linked_id is not None:
            self.linked_id = linked_id
        self.admin = admin

    @property
    def id(self):
        """Gets the id of this Order.  # noqa: E501


        :return: The id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Order.  # noqa: E501


        :return: The account_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Order.


        :param account_id: The account_id of this Order.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def contract_id(self):
        """Gets the contract_id of this Order.  # noqa: E501


        :return: The contract_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Order.


        :param contract_id: The contract_id of this Order.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def spread_definition_id(self):
        """Gets the spread_definition_id of this Order.  # noqa: E501


        :return: The spread_definition_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._spread_definition_id

    @spread_definition_id.setter
    def spread_definition_id(self, spread_definition_id):
        """Sets the spread_definition_id of this Order.


        :param spread_definition_id: The spread_definition_id of this Order.  # noqa: E501
        :type: int
        """

        self._spread_definition_id = spread_definition_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Order.  # noqa: E501

        Create Time  # noqa: E501

        :return: The timestamp of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Order.

        Create Time  # noqa: E501

        :param timestamp: The timestamp of this Order.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def action(self):
        """Gets the action of this Order.  # noqa: E501

        Buy, Sell  # noqa: E501

        :return: The action of this Order.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Order.

        Buy, Sell  # noqa: E501

        :param action: The action of this Order.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["Buy", "Sell"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def ord_status(self):
        """Gets the ord_status of this Order.  # noqa: E501

        Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working  # noqa: E501

        :return: The ord_status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._ord_status

    @ord_status.setter
    def ord_status(self, ord_status):
        """Sets the ord_status of this Order.

        Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working  # noqa: E501

        :param ord_status: The ord_status of this Order.  # noqa: E501
        :type: str
        """
        if ord_status is None:
            raise ValueError("Invalid value for `ord_status`, must not be `None`")  # noqa: E501
        allowed_values = ["Canceled", "Completed", "Expired", "Filled", "PendingCancel", "PendingNew", "PendingReplace", "Rejected", "Suspended", "Unknown", "Working"]  # noqa: E501
        if ord_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_status, allowed_values)
            )

        self._ord_status = ord_status

    @property
    def execution_provider_id(self):
        """Gets the execution_provider_id of this Order.  # noqa: E501


        :return: The execution_provider_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._execution_provider_id

    @execution_provider_id.setter
    def execution_provider_id(self, execution_provider_id):
        """Sets the execution_provider_id of this Order.


        :param execution_provider_id: The execution_provider_id of this Order.  # noqa: E501
        :type: int
        """

        self._execution_provider_id = execution_provider_id

    @property
    def oco_id(self):
        """Gets the oco_id of this Order.  # noqa: E501


        :return: The oco_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._oco_id

    @oco_id.setter
    def oco_id(self, oco_id):
        """Sets the oco_id of this Order.


        :param oco_id: The oco_id of this Order.  # noqa: E501
        :type: int
        """

        self._oco_id = oco_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Order.  # noqa: E501


        :return: The parent_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Order.


        :param parent_id: The parent_id of this Order.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def linked_id(self):
        """Gets the linked_id of this Order.  # noqa: E501


        :return: The linked_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._linked_id

    @linked_id.setter
    def linked_id(self, linked_id):
        """Sets the linked_id of this Order.


        :param linked_id: The linked_id of this Order.  # noqa: E501
        :type: int
        """

        self._linked_id = linked_id

    @property
    def admin(self):
        """Gets the admin of this Order.  # noqa: E501


        :return: The admin of this Order.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Order.


        :param admin: The admin of this Order.  # noqa: E501
        :type: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
